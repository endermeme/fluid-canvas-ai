# COPYRIGHT (C) 2025 B√¨nh Ta gi l∆° 
# This program is free software: you can redistribute it and/or modify
# D√íNG N√ÄY ƒê√ÅNH D·∫§U CH·ª¶ QUY·ªÄN ƒê√ÇY L√Ä CODE C·ª¶A M·ªòT TH·∫∞NG CODER 17 TU·ªîI ƒêANG KH·ªî D√ÇM V·ªöI V√ÄI C√ÅI PROJECT TO V√ÉI QU·∫†C :v VUI L√íNG K XO√Å ƒê·ªÇ B√ÄY T·ªé L√íNG T√îN TR·ªåNG V·ªöI M·ªòT CODER KI√äM Sƒ® T·ª¨ L∆Ø∆†NG CH∆ØA ƒê·ª¶ NU√îI THI√äN AN TR∆Ø·ªöC L·∫†M PH√ÅT :)))

import os
import datetime
import google.generativeai as genai
from docxtpl import DocxTemplate
import sys

# M√†u cho terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m' 
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def print_header():
    """C√¥ng c·ª• chuy·ªÉn form docx v·ªõi gemini by B√¨nh Ta gi l∆° (Not Ta li ga) """
    print(f"\n{Colors.BOLD}{Colors.HEADER}=================================================={Colors.END}")
    print(f"{Colors.BOLD}{Colors.HEADER}   BINH TAGILLA (NOT TA LI GA)  {Colors.END}")
    print(f"{Colors.BOLD}{Colors.HEADER}=================================================={Colors.END}")
  
def find_template_variables(doc_file):
    """T√¨m bi·∫øn trong file Word"""
    try:
        print(f"{Colors.BLUE}üîç ƒêang t√¨m bi·∫øn trong file: {doc_file}{Colors.END}")
        
        if not os.path.exists(doc_file):
            print(f"{Colors.RED}‚ùå Kh√¥ng th·∫•y file! Ki·ªÉm tra l·∫°i t√™n nh√©.{Colors.END}")
            return None
            
        doc = DocxTemplate(doc_file)
        variables = doc.get_undeclared_template_variables()
        
        if variables:
            print(f"{Colors.GREEN}‚ú® T√¨m ƒë∆∞·ª£c {len(variables)} bi·∫øn r·ªìi!{Colors.END}")
            return sorted(variables)
        else:
            print(f"{Colors.YELLOW}‚ö†Ô∏è H√¨nh nh∆∞ file n√†y kh√¥ng c√≥ bi·∫øn n√†o...{Colors.END}")
            print(f"{Colors.YELLOW}üîî Check l·∫°i xem c√≥ ph·∫£i file m·∫´u kh√¥ng nh√©?{Colors.END}")
            return None
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói ƒë·ªçc file: {str(e)}{Colors.END}")
        return None

def configure_gemini(api_key):
    """C√†i ƒë·∫∑t API Gemini"""
    try:
        genai.configure(api_key=api_key)
        
        config = {
            "temperature": 0.3,
            "top_p": 1,
            "top_k": 40,
            "max_output_tokens": 4096,
        }
        
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config=config
        )
        
        print(f"{Colors.GREEN}‚úÖ Ok! K·∫øt n·ªëi Gemini th√†nh c√¥ng r·ªìi!{Colors.END}")
        return model
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói k·∫øt n·ªëi: {str(e)}{Colors.END}")
        return None

def generate_content(model, prompt, variables):
    """T·∫°o n·ªôi dung cho c√°c bi·∫øn"""
    try:
        print(f"{Colors.BLUE}‚è≥ ƒêang nh·ªù Gemini vi·∫øt n·ªôi dung...{Colors.END}")
        
        main_prompt = f"""
        B·∫°n l√† tr·ª£ l√Ω gi√∫p ƒëi·ªÅn form. D·ª±a v√†o y√™u c·∫ßu:
        
        "{prompt}"
        
        T·∫°o n·ªôi dung cho c√°c tr∆∞·ªùng sau trong form nh√©.
        Tr·∫£ v·ªÅ d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng t∆∞∆°ng ·ª©ng.
        Vi·∫øt ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, ƒë√∫ng ti·∫øng Vi·ªát.
        
        C√°c tr∆∞·ªùng c·∫ßn ƒëi·ªÅn: {", ".join(variables)}
        """
        
        response = model.generate_content(main_prompt)
        
        try:
            import json
            import re
            
            content = response.text
            json_pattern = r'\{[\s\S]*\}'
            json_match = re.search(json_pattern, content)
            
            if json_match:
                json_str = json_match.group(0)
                data = json.loads(json_str)
                
                missing = [var for var in variables if var not in data]
                if missing:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è C√≤n thi·∫øu {len(missing)} tr∆∞·ªùng. ƒê·ªÉ l·∫•y th√™m...{Colors.END}")
                    
                    for var in missing:
                        var_prompt = f"""
                        Theo y√™u c·∫ßu: "{prompt}"
                        
                        Vi·∫øt n·ªôi dung ng·∫Øn g·ªçn cho tr∆∞·ªùng "{var}".
                        Ch·ªâ c·∫ßn tr·∫£ v·ªÅ n·ªôi dung th√¥i nh√©.
                        """
                        var_response = model.generate_content(var_prompt)
                        data[var] = var_response.text.strip()
                
                return data
            else:
                print(f"{Colors.YELLOW}‚ö†Ô∏è Kh√¥ng th·∫•y JSON. Th·ª≠ c√°ch kh√°c v·∫≠y...{Colors.END}")
                return generate_content_manually(model, prompt, variables)
                
        except Exception as e:
            print(f"{Colors.YELLOW}‚ö†Ô∏è L·ªói x·ª≠ l√Ω: {str(e)}{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è Th·ª≠ c√°ch th·ª© 2 v·∫≠y...{Colors.END}")
            return generate_content_manually(model, prompt, variables)
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói g·ªçi Gemini: {str(e)}{Colors.END}")
        return None

def generate_content_manually(model, prompt, variables):
    """T·∫°o n·ªôi dung t·ª´ng bi·∫øn m·ªôt"""
    content = {}
    
    print(f"{Colors.BLUE}‚è≥ ƒêang t·∫°o n·ªôi dung t·ª´ng ph·∫ßn...{Colors.END}")
    
    for var in variables:
        try:
            var_prompt = f"""
            Gi√∫p ƒëi·ªÅn form nh√©. Theo y√™u c·∫ßu:
            
            "{prompt}"
            
            Vi·∫øt n·ªôi dung cho tr∆∞·ªùng "{var}".
            Ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, ƒë√∫ng ti·∫øng Vi·ªát.
            Ch·ªâ c·∫ßn n·ªôi dung th√¥i nh√©.
            """
            
            print(f"  ƒêang vi·∫øt cho ph·∫ßn: {var}...")
            response = model.generate_content(var_prompt)
            content[var] = response.text.strip()
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå L·ªói ph·∫ßn {var}: {str(e)}{Colors.END}")
            content[var] = f"[L·ªói: Ch∆∞a t·∫°o ƒë∆∞·ª£c]"
    
    return content

def render_template(template_file, output_file, context):
    """ƒêi·ªÅn form v√† l∆∞u file"""
    try:
        doc = DocxTemplate(template_file)
        doc.render(context)
        doc.save(output_file)
        
        print(f"{Colors.GREEN}‚úÖ Xong! ƒê√£ l∆∞u file: {output_file}{Colors.END}")
        return True
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói l∆∞u file: {str(e)}{Colors.END}")
        return False

def main():
    """Ch·∫°y ch∆∞∆°ng tr√¨nh"""
    print_header()
    
    template_file = input(f"{Colors.YELLOW}Nh·∫≠p t√™n file Word (VD: mau_don.docx): {Colors.END}").strip()
    if not template_file:
        print(f"{Colors.RED}‚ùå Ch∆∞a nh·∫≠p t√™n file k√¨a.{Colors.END}")
        return
    
    variables = find_template_variables(template_file)
    if not variables:
        return
    
    print(f"\n{Colors.BLUE}üìã C√°c bi·∫øn t√¨m ƒë∆∞·ª£c:{Colors.END}")
    for i, var in enumerate(variables, 1):
        print(f"  {i}. {{{{ {var} }}}}")
    
    api_key = input(f"\n{Colors.YELLOW}Nh·∫≠p API key Gemini (ho·∫∑c Enter ƒë·ªÉ d√πng GOOGLE_API_KEY): {Colors.END}").strip()
    if not api_key:
        api_key = os.environ.get("GOOGLE_API_KEY")
        if not api_key:
            print(f"{Colors.RED}‚ùå Ch∆∞a c√≥ API key.{Colors.END}")
            return
    
    model = configure_gemini(api_key)
    if not model:
        return
    
    print(f"\n{Colors.BLUE}üìù Nh·∫≠p y√™u c·∫ßu ƒë·ªÉ AI vi·∫øt n·ªôi dung:{Colors.END}")
    print(f"{Colors.YELLOW}VD: Vi·∫øt ƒë∆°n xin ngh·ªâ 3 ng√†y t·ª´ 15/7-17/7 cho Nguy·ªÖn VƒÉn A v√¨ vi·ªác ri√™ng{Colors.END}")
    prompt = input(f"\n{Colors.BOLD}Y√™u c·∫ßu c·ªßa b·∫°n: {Colors.END}")
    
    if not prompt:
        print(f"{Colors.RED}‚ùå Ch∆∞a nh·∫≠p y√™u c·∫ßu k√¨a.{Colors.END}")
        return
    
    content = generate_content(model, prompt, variables)
    if not content:
        return
    
    print(f"\n{Colors.BLUE}üìã N·ªôi dung ƒë√£ vi·∫øt:{Colors.END}")
    for var, text in content.items():
        print(f"  {Colors.BOLD}{{{{ {var} }}}} = {Colors.END}{text}")
    
    ok = input(f"\n{Colors.YELLOW}ƒêi·ªÅn form lu√¥n nh√©? (y/n): {Colors.END}").strip().lower()
    if ok != 'y':
        print(f"{Colors.YELLOW}üîî Ok, kh√¥ng ƒëi·ªÅn.{Colors.END}")
        return
    
    time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output = f"{os.path.splitext(template_file)[0]}_{time}.docx"
    
    if render_template(template_file, output, content):
        print(f"\n{Colors.GREEN}üéâ Xong r·ªìi! File m·ªõi: {output}{Colors.END}")
        
        edit = input(f"\n{Colors.YELLOW}Mu·ªën s·ª≠a l·∫°i kh√¥ng? (y/n): {Colors.END}").strip().lower()
        if edit == 'y':
            print(f"\n{Colors.BLUE}Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh v√† s·ª≠a y√™u c·∫ßu nh√©!{Colors.END}")

if __name__ == "__main__":
    main()  

