/**
 * Demo m√¥ ph·ªèng c√°ch t√≠ch h·ª£p DirectHTMLParser v√†o AIGameGenerator
 * Ph·∫ßn n√†y ch·ªâ m√¥ ph·ªèng, c·∫ßn t√≠ch h·ª£p th·ª±c t·∫ø v√†o AIGameGenerator.ts
 */

// Import th∆∞ vi·ªán c·∫ßn thi·∫øt
const fs = require('fs');
const path = require('path');
const { processGeminiHtml } = require('./direct-html-loader.cjs');

/**
 * T√≠ch h·ª£p tr·ª±c ti·∫øp v√†o AIGameGenerator - Ph·∫ßn m√¥ ph·ªèng
 * Thay ƒë·ªïi c√°ch x·ª≠ l√Ω response t·ª´ API Gemini
 */
class AIGameGeneratorDemo {
  /**
   * X·ª≠ l√Ω response HTML t·ª´ Gemini
   */
  processGeminiResponse(geminiResponse) {
    console.log('üìå Nh·∫≠n response t·ª´ Gemini API...');
    
    try {
      // C√°ch c≈©: Parse HTML, CSS, JS ri√™ng bi·ªát
      // const { html, css, js } = extractCodeFromMarkdown(text);
      // const formattedHTML = formatHTML(html);
      // const formattedCSS = formatCss(css);
      // const formattedJS = formatJavaScript(js);
      // const completeHtml = createCompleteHtml(formattedHTML, formattedCSS, formattedJS);
      
      // C√°ch m·ªõi: X·ª≠ l√Ω HTML tr·ª±c ti·∫øp kh√¥ng t√°ch file
      console.log('üìå X·ª≠ l√Ω HTML tr·ª±c ti·∫øp kh√¥ng t√°ch file...');
      const gameData = processGeminiHtml(geminiResponse);
      
      console.log('‚úÖ ƒê√£ x·ª≠ l√Ω xong response!');
      return gameData;
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω response:', error);
      return this.createErrorResponse('L·ªói x·ª≠ l√Ω HTML');
    }
  }
  
  /**
   * T·∫°o response l·ªói
   */
  createErrorResponse(errorMessage) {
    const errorHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Error</title>
        <style>
          body {
            font-family: system-ui, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            text-align: center;
            color: #333;
          }
          .error-container {
            background-color: #fee2e2;
            border: 1px solid #ef4444;
            border-radius: 8px;
            padding: 20px;
          }
          h1 { color: #b91c1c; }
        </style>
      </head>
      <body>
        <div class="error-container">
          <h1>Error Processing Game</h1>
          <p>${errorMessage}</p>
          <p>Please try again or check the console for more details.</p>
        </div>
      </body>
      </html>
    `;
    
    return {
      title: 'Error',
      description: errorMessage,
      content: errorHtml,
      isSeparatedFiles: false
    };
  }
  
  /**
   * Demo generate game (m√¥ ph·ªèng)
   */
  async generateMiniGame(topic) {
    console.log(`üìå ƒêang t·∫°o game v·ªõi ch·ªß ƒë·ªÅ: ${topic}...`);
    
    try {
      // ƒê·ªçc HTML m·∫´u t·ª´ file (gi·∫£ l·∫≠p response t·ª´ Gemini)
      const htmlFile = path.join(__dirname, 'gemini-html-example.html');
      const htmlContent = fs.readFileSync(htmlFile, 'utf8');
      
      // X·ª≠ l√Ω n·ªôi dung HTML
      const gameData = this.processGeminiResponse(htmlContent);
      
      console.log('‚úÖ ƒê√£ t·∫°o game th√†nh c√¥ng!');
      return gameData;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o game:', error);
      return this.createErrorResponse('Kh√¥ng th·ªÉ t·∫°o game');
    }
  }
}

// Demo
(async () => {
  // T·∫°o instance c·ªßa AIGameGenerator
  const gameGenerator = new AIGameGeneratorDemo();
  
  // T·∫°o game
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o game...');
  const game = await gameGenerator.generateMiniGame('V√≤ng Quay May M·∫Øn');
  
  // Hi·ªÉn th·ªã th√¥ng tin game
  console.log('\n=== TH√îNG TIN GAME ===');
  console.log('Title:', game.title);
  console.log('HTML c√≥ t√°ch file?', game.isSeparatedFiles ? 'C√≥' : 'Kh√¥ng');
  
  // Ghi n·ªôi dung HTML ra file ƒë·ªÉ ki·ªÉm tra
  fs.writeFileSync(path.join(__dirname, 'processed-game.html'), game.content, 'utf8');
  console.log('\n‚úÖ ƒê√£ l∆∞u HTML ƒë√£ x·ª≠ l√Ω v√†o file processed-game.html');
  
  // Ghi t√≥m t·∫Øt n·ªôi dung HTML ƒë·ªÉ ki·ªÉm tra (kh√¥ng ghi to√†n b·ªô v√¨ qu√° d√†i)
  const htmlPreview = game.content.substring(0, 500) + '...';
  console.log('\n=== HTML PREVIEW ===');
  console.log(htmlPreview);
})();

/**
 * H∆∞·ªõng d·∫´n t√≠ch h·ª£p v√†o AIGameGenerator.ts th·∫≠t
 * 
 * 1. T·∫°o file m·ªõi direct-html-parser.ts d·ª±a tr√™n direct-html-loader.cjs
 * 2. Import v√†o AIGameGenerator.ts:
 *    import { processGeminiHtml } from './direct-html-parser';
 * 
 * 3. Thay ƒë·ªïi ph∆∞∆°ng th·ª©c x·ª≠ l√Ω response trong generateMiniGame:
 *    // Thay v√¨ s·ª≠ d·ª•ng parseGeminiResponse t·ª´ responseParser
 *    // const miniGame = parseGeminiResponse(geminiResponse, topic);
 *    
 *    // S·ª≠ d·ª•ng processGeminiHtml ƒë·ªÉ x·ª≠ l√Ω tr·ª±c ti·∫øp
 *    const miniGame = processGeminiHtml(geminiResponse);
 * 
 * 4. ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng c·∫ßn thi·∫øt ƒë∆∞·ª£c tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng MiniGame
 */ 