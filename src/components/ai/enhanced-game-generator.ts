
import { GoogleGenerativeAI } from '@google/generative-ai';

interface DetailedGameSettings {
  difficulty: string;
  category: string;
  gameType: string;
  playerCount: string;
  timeLimit: number;
  complexity: number;
  useCanvas: boolean;
  includeSound: boolean;
  mobileOptimized: boolean;
  language: string;
  customSettings: string;
  prompt: string;
}

interface GeneratedGame {
  title: string;
  content: string;
  metadata?: {
    generationTime: number;
    retryCount: number;
    model: string;
    settings: DetailedGameSettings;
  };
}

class EnhancedGameGenerator {
  private static instance: EnhancedGameGenerator;
  private genAI: GoogleGenerativeAI;
  private readonly maxRetries = 5;
  private readonly retryDelay = 2000;

  private constructor() {
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('VITE_GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
    console.log('ü§ñ [GENERATOR] Enhanced Game Generator initialized');
  }

  public static getInstance(): EnhancedGameGenerator {
    if (!EnhancedGameGenerator.instance) {
      EnhancedGameGenerator.instance = new EnhancedGameGenerator();
    }
    return EnhancedGameGenerator.instance;
  }

  private buildDetailedPrompt(settings: DetailedGameSettings): string {
    const difficultyMap = {
      'easy': 'd·ªÖ d√†ng, ph√π h·ª£p tr·∫ª em, controls ƒë∆°n gi·∫£n',
      'medium': 'trung b√¨nh, c·∫ßn t·∫≠p trung m·ªôt ch√∫t',
      'hard': 'kh√≥, ƒë√≤i h·ªèi k·ªπ nƒÉng cao',
      'expert': 'c·ª±c k·ª≥ kh√≥, th·ª≠ th√°ch c·ª±c ƒë·∫°i'
    };

    const categoryMap = {
      'action': 'h√†nh ƒë·ªông nhanh, ph·∫£n x·∫°',
      'puzzle': 'logic, suy nghƒ©',
      'arcade': 'gi·∫£i tr√≠, d·ªÖ ch∆°i',
      'strategy': 'chi·∫øn thu·∫≠t, l·∫≠p k·∫ø ho·∫°ch',
      'adventure': 'kh√°m ph√°, c√¢u chuy·ªán',
      'racing': 't·ªëc ƒë·ªô, ƒëi·ªÅu khi·ªÉn xe',
      'sports': 'th·ªÉ thao, thi ƒë·∫•u',
      'educational': 'h·ªçc t·∫≠p, gi√°o d·ª•c'
    };

    return `
# Y√äU C·∫¶U T·∫†O GAME CHI TI·∫æT

## M√¥ t·∫£ game:
${settings.prompt}

## Th√¥ng s·ªë k·ªπ thu·∫≠t:
- **Th·ªÉ lo·∫°i**: ${settings.category} (${categoryMap[settings.category as keyof typeof categoryMap] || 't·ªïng qu√°t'})
- **ƒê·ªô kh√≥**: ${settings.difficulty} (${difficultyMap[settings.difficulty as keyof typeof difficultyMap] || 'trung b√¨nh'})
- **Ki·ªÉu ch∆°i**: ${settings.playerCount}
- **Th·ªùi gian m·ªói l∆∞·ª£t**: ${settings.timeLimit} gi√¢y
- **ƒê·ªô ph·ª©c t·∫°p**: ${settings.complexity}/10
- **Ng√¥n ng·ªØ**: ${settings.language === 'vi' ? 'Ti·∫øng Vi·ªát' : 'English'}
- **T·ªëi ∆∞u Canvas**: ${settings.useCanvas ? 'B·∫ÆT BU·ªòC s·ª≠ d·ª•ng HTML5 Canvas' : 'Ch·ªâ d√πng DOM/CSS'}
- **√Çm thanh**: ${settings.includeSound ? 'C√≥ √¢m thanh Web Audio API' : 'Kh√¥ng c√≥ √¢m thanh'}
- **Mobile**: ${settings.mobileOptimized ? 'T·ªëi ∆∞u cho touch screen' : 'Desktop only'}

## Y√™u c·∫ßu ƒë·∫∑c bi·ªát:
${settings.customSettings || 'Kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát'}

## H∆Ø·ªöNG D·∫™N K·ª∏ THU·∫¨T QUAN TR·ªåNG:

### C·∫•u tr√∫c HTML:
\`\`\`html
<!DOCTYPE html>
<html lang="${settings.language}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[T√™n Game]</title>
    <style>
        /* ALL CSS HERE */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            ${settings.mobileOptimized ? 'touch-action: manipulation; -webkit-tap-highlight-color: transparent;' : ''}
        }
        
        ${settings.mobileOptimized ? `
        @media (max-width: 768px) {
            body { font-size: 14px; padding: 10px; }
            button { min-height: 44px; min-width: 44px; font-size: 16px; }
            .game-control { touch-action: manipulation; }
        }
        ` : ''}
    </style>
</head>
<body>
    <!-- Game HTML Structure -->
    ${settings.useCanvas ? '<canvas id="gameCanvas" width="800" height="600"></canvas>' : '<div id="gameContainer"></div>'}
    
    <script>
        // ALL JAVASCRIPT HERE
        console.log('üéÆ Game loading...');
        
        ${settings.useCanvas ? this.getCanvasTemplate() : this.getDOMTemplate()}
        
        // Game logic implementation
        // ...your game code here...
        
        console.log('üéÆ Game initialized successfully');
    </script>
</body>
</html>
\`\`\`

### QUY T·∫ÆC B·∫ÆT BU·ªòC:
1. **HO√ÄN CH·ªàNH**: Game ph·∫£i ch·∫°y ƒë∆∞·ª£c ngay l·∫≠p t·ª©c
2. **RESPONSIVE**: T∆∞∆°ng th√≠ch m·ªçi thi·∫øt b·ªã  
3. **ERROR HANDLING**: X·ª≠ l√Ω l·ªói ƒë·∫ßy ƒë·ªß
4. **PERFORMANCE**: T·ªëi ∆∞u fps v√† memory
5. **UX**: Giao di·ªán tr·ª±c quan, d·ªÖ hi·ªÉu
6. **NO EXTERNAL DEPS**: Kh√¥ng s·ª≠ d·ª•ng th∆∞ vi·ªán ngo√†i

### OUTPUT FORMAT:
Ch·ªâ tr·∫£ v·ªÅ HTML ho√†n ch·ªânh, KH√îNG c√≥ markdown backticks hay gi·∫£i th√≠ch th√™m.
B·∫Øt ƒë·∫ßu ngay b·∫±ng <!DOCTYPE html>

H√£y t·∫°o game theo ƒë√∫ng specification tr√™n!
`;
  }

  private getCanvasTemplate(): string {
    return `
        // Canvas setup with error handling
        const canvas = document.getElementById('gameCanvas');
        if (!canvas) {
            console.error('Canvas element not found');
            document.body.innerHTML = '<div style="color: white; text-align: center;">Canvas kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£</div>';
            throw new Error('Canvas not supported');
        }
        
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            console.error('2D context not available');
            document.body.innerHTML = '<div style="color: white; text-align: center;">Canvas 2D kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£</div>';
            throw new Error('Canvas 2D not supported');
        }
        
        // Responsive canvas
        function resizeCanvas() {
            const container = canvas.parentElement;
            const maxWidth = Math.min(800, container.clientWidth - 20);
            const maxHeight = Math.min(600, container.clientHeight - 20);
            
            canvas.width = maxWidth;
            canvas.height = maxHeight;
            canvas.style.border = '2px solid #fff';
            canvas.style.borderRadius = '8px';
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        // Animation loop
        let gameRunning = false;
        function gameLoop() {
            if (!gameRunning) return;
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Game logic here
            
            requestAnimationFrame(gameLoop);
        }
    `;
  }

  private getDOMTemplate(): string {
    return `
        // DOM-based game setup
        const gameContainer = document.getElementById('gameContainer');
        if (!gameContainer) {
            console.error('Game container not found');
            throw new Error('Game container not found');
        }
        
        // Setup game area
        gameContainer.style.cssText = \`
            width: 100%;
            max-width: 800px;
            height: 600px;
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 12px;
            position: relative;
            overflow: hidden;
        \`;
        
        // Game state
        let gameRunning = false;
        
        // Game loop for DOM updates
        function gameLoop() {
            if (!gameRunning) return;
            
            // Game logic here
            
            requestAnimationFrame(gameLoop);
        }
    `;
  }

  public async generateGame(settings: DetailedGameSettings): Promise<GeneratedGame> {
    const startTime = Date.now();
    console.log('üöÄ [GENERATOR] Starting detailed game generation...', {
      prompt: settings.prompt.substring(0, 100) + '...',
      settings: {
        difficulty: settings.difficulty,
        category: settings.category,
        useCanvas: settings.useCanvas,
        complexity: settings.complexity
      }
    });

    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        console.log(`üîÑ [GENERATOR] Attempt ${attempt}/${this.maxRetries}`);
        
        const model = this.genAI.getGenerativeModel({ 
          model: 'gemini-pro',
          generationConfig: {
            temperature: 0.8,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          }
        });
        
        const prompt = this.buildDetailedPrompt(settings);
        console.log('üìù [GENERATOR] Prompt length:', prompt.length);
        console.log('üìù [GENERATOR] Prompt preview:', prompt.substring(0, 300) + '...');
        
        const result = await model.generateContent(prompt);
        const response = result.response;
        
        console.log('üì• [GENERATOR] Raw response received:', {
          candidatesCount: response.candidates?.length || 0,
          hasText: !!response.text,
          responseKeys: Object.keys(response)
        });
        
        let content = response.text();
        console.log('üìÑ [GENERATOR] Content extracted:', {
          length: content.length,
          hasDoctype: content.includes('<!DOCTYPE'),
          hasHtml: content.includes('<html'),
          hasCanvas: content.includes('canvas'),
          preview: content.substring(0, 200)
        });
        
        if (!content || content.length < 100) {
          throw new Error(`Content too short: ${content.length} characters`);
        }
        
        // Clean and validate content
        content = this.cleanAndValidateContent(content, settings);
        
        const generationTime = Date.now() - startTime;
        console.log('‚úÖ [GENERATOR] Game generated successfully!', {
          generationTime: `${generationTime}ms`,
          finalLength: content.length,
          attempt
        });
        
        return {
          title: this.extractTitle(content, settings),
          content,
          metadata: {
            generationTime,
            retryCount: attempt - 1,
            model: 'gemini-pro',
            settings
          }
        };
        
      } catch (error) {
        lastError = error as Error;
        console.error(`‚ùå [GENERATOR] Attempt ${attempt} failed:`, {
          error: lastError.message,
          stack: lastError.stack,
          willRetry: attempt < this.maxRetries
        });
        
        if (attempt < this.maxRetries) {
          const delay = this.retryDelay * attempt;
          console.log(`‚è≥ [GENERATOR] Waiting ${delay}ms before retry...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    console.error('üí• [GENERATOR] All attempts failed. Last error:', lastError);
    throw new Error(`Failed to generate game after ${this.maxRetries} attempts: ${lastError?.message}`);
  }

  private cleanAndValidateContent(content: string, settings: DetailedGameSettings): string {
    console.log('üßπ [GENERATOR] Cleaning content...');
    
    // Remove markdown formatting
    content = content.replace(/```html\s*/g, '').replace(/```\s*/g, '').trim();
    
    // Ensure DOCTYPE
    if (!content.includes('<!DOCTYPE')) {
      content = '<!DOCTYPE html>\n' + content;
    }
    
    // Validate structure
    const requiredElements = ['<html', '<head', '<body', '</html>'];
    const missing = requiredElements.filter(el => !content.includes(el));
    
    if (missing.length > 0) {
      console.warn('‚ö†Ô∏è [GENERATOR] Missing elements:', missing);
      throw new Error(`Invalid HTML structure. Missing: ${missing.join(', ')}`);
    }
    
    // Add error handling if missing
    if (!content.includes('window.onerror')) {
      const errorHandler = `
    <script>
        window.onerror = function(msg, url, line, col, error) {
            console.error('üéÆ Game Error:', { msg, line, col, error: error?.message });
            return false;
        };
        
        window.addEventListener('unhandledrejection', function(event) {
            console.error('üéÆ Unhandled Promise Rejection:', event.reason);
        });
    </script>`;
      
      content = content.replace('</body>', errorHandler + '\n</body>');
    }
    
    console.log('‚ú® [GENERATOR] Content cleaned and validated');
    return content;
  }

  private extractTitle(content: string, settings: DetailedGameSettings): string {
    const titleMatch = content.match(/<title>(.*?)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      return titleMatch[1].trim();
    }
    
    const h1Match = content.match(/<h1[^>]*>(.*?)<\/h1>/i);
    if (h1Match && h1Match[1]) {
      return h1Match[1].replace(/<[^>]*>/g, '').trim();
    }
    
    return `${settings.category} Game - ${settings.prompt.substring(0, 30)}...`;
  }
}

export { EnhancedGameGenerator };
export type { DetailedGameSettings, GeneratedGame };
