import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { SparklesIcon, Info, Code, Key, Settings } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { AIGameGenerator } from '../generator/geminiGenerator';
import { MiniGame } from '../generator/types';
import { GameSettingsData } from '../types';
import GameLoading from '../GameLoading';
import { motion } from 'framer-motion';
interface CustomGameFormProps {
  onGenerate: (content: string, game?: MiniGame) => void;
  onCancel: () => void;
}
const CustomGameForm: React.FC<CustomGameFormProps> = ({
  onGenerate,
  onCancel
}) => {
  const [content, setContent] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [apiProvider, setApiProvider] = useState<'gemini' | 'openrouter'>('gemini');
  
  // Fixed API key for OpenRouter
  const OPENROUTER_API_KEY = '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';
  const {
    toast
  } = useToast();
  const navigate = useNavigate();
  const gameGenerator = AIGameGenerator.getInstance();
  const getPlaceholderText = () => {
    return 'M√¥ t·∫£ chi ti·∫øt game b·∫°n mu·ªën t·∫°o. H√£y bao g·ªìm th·ªÉ lo·∫°i game, giao di·ªán, c√°ch ch∆°i v√† b·∫•t k·ª≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o.\n\nV√≠ d·ª•: "T·∫°o m·ªôt tr√≤ ch∆°i x·∫øp h√¨nh v·ªõi 9 m·∫£nh gh√©p h√¨nh ·∫£nh v·ªÅ v≈© tr·ª•, c√≥ √¢m thanh khi ho√†n th√†nh v√† hi·ªáu ·ª©ng ng√¥i sao khi ng∆∞·ªùi ch∆°i th·∫Øng."';
  };
  const handleSubmit = async () => {
    if (!content.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng m√¥ t·∫£ game b·∫°n mu·ªën t·∫°o",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    try {
      const settings: GameSettingsData = {
        category: 'custom'
      };
      const game = await gameGenerator.generateMiniGame(
        content, 
        settings, 
        apiProvider, 
        apiProvider === 'openrouter' ? OPENROUTER_API_KEY : undefined
      );
      if (game) {
        toast({
          title: "ƒê√£ t·∫°o tr√≤ ch∆°i",
          description: `Tr√≤ ch∆°i ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi ${apiProvider === 'gemini' ? 'Gemini' : 'Kimi K2'}.`
        });
        onGenerate(content, game);
      } else {
        throw new Error("Kh√¥ng th·ªÉ t·∫°o game");
      }
    } catch (error) {
      console.error("L·ªói khi t·∫°o game:", error);
      toast({
        title: "L·ªói t·∫°o game",
        description: "C√≥ l·ªói x·∫£y ra khi t·∫°o game. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive"
      });
      onGenerate(content);
    } finally {
      setIsGenerating(false);
    }
  };
  const handleCancel = () => {
    if (window.location.pathname === '/quiz' && !window.location.search) {
      navigate('/');
    } else {
      onCancel();
    }
  };

  // Check loading state after all hooks are called
  if (isGenerating) {
    return <GameLoading topic={content} />;
  }
  return <div className="min-h-screen bg-gradient-to-br from-blue-50 via-sky-50 to-blue-100 dark:from-blue-950 dark:via-sky-950 dark:to-blue-950 relative">

      <div className="relative z-10 min-h-screen flex items-center justify-center p-4">
        <motion.div initial={{
        opacity: 0,
        y: 20
      }} animate={{
        opacity: 1,
        y: 0
      }} transition={{
        duration: 0.6
      }}>
          <Card className="max-w-3xl w-full mx-auto bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl border-2 border-blue-200/50 dark:border-blue-700/50 shadow-[0_0_50px_rgba(59,130,246,0.15)] rounded-3xl overflow-hidden">
            <div className="p-8 sm:p-10">
              <motion.div className="mb-8 text-center" initial={{
              opacity: 0,
              y: 10
            }} animate={{
              opacity: 1,
              y: 0
            }} transition={{
              delay: 0.2,
              duration: 0.5
            }}>
                <div className="flex flex-col items-center gap-4 mb-6">
                  <motion.div className="p-4 rounded-2xl bg-gradient-to-br from-blue-100 to-sky-100 dark:from-blue-900/50 dark:to-sky-900/50 backdrop-blur-sm border border-blue-200/30 shadow-lg" whileHover={{
                  scale: 1.05,
                  rotate: 5
                }} transition={{
                  type: "spring",
                  stiffness: 300
                }}>
                    <Code className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                  </motion.div>
                  <div>
                    <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 via-sky-600 to-blue-700 bg-clip-text text-transparent">
                      T·∫°o tr√≤ ch∆°i t√πy ch·ªânh v·ªõi AI
                    </h2>
                    <p className="text-muted-foreground mt-2.5 max-w-xl mx-auto text-lg">
                      M√¥ t·∫£ chi ti·∫øt game b·∫°n mu·ªën t·∫°o v√† AI s·∫Ω x√¢y d·ª±ng n√≥ cho b·∫°n
                    </p>
                  </div>
                </div>
              </motion.div>
              
              <motion.div className="space-y-8" initial={{
              opacity: 0
            }} animate={{
              opacity: 1
            }} transition={{
              delay: 0.4,
              duration: 0.5
            }}>
                <div className="relative">
                  <Label htmlFor="content" className="flex items-center justify-center gap-2.5 text-lg font-medium mb-4">
                    <SparklesIcon className="h-5 w-5 text-blue-600" /> 
                    M√¥ t·∫£ game c·ªßa b·∫°n
                  </Label>
                  <Textarea id="content" placeholder={getPlaceholderText()} value={content} onChange={e => setContent(e.target.value)} rows={7} className="font-mono text-sm border-2 border-blue-200/40 bg-white/60 dark:bg-slate-800/60 backdrop-blur-md focus-visible:ring-blue-400/50 focus-visible:border-blue-400/60 rounded-2xl transition-all duration-300 resize-none shadow-lg" />
                </div>

                {/* Mode Selection - moved below description */}
                <div>
                  <Label className="flex items-center gap-2.5 text-lg font-medium mb-3">
                    <Settings className="h-5 w-5 text-blue-600" />
                    Ch·∫ø ƒë·ªô AI
                  </Label>
                  <Select value={apiProvider} onValueChange={(value: 'gemini' | 'openrouter') => setApiProvider(value)}>
                    <SelectTrigger className="border-2 border-blue-200/40 bg-white/60 dark:bg-slate-800/60 backdrop-blur-md focus:ring-blue-400/50 focus:border-blue-400/60 rounded-xl shadow-lg">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="gemini">üöÄ C∆° b·∫£n (Gemini)</SelectItem>
                      <SelectItem value="openrouter">‚≠ê N√¢ng cao (Kimi K2)</SelectItem>
                    </SelectContent>
                  </Select>
                  <p className="text-sm text-muted-foreground mt-2">
                    {apiProvider === 'gemini' 
                      ? 'Ch·∫ø ƒë·ªô c∆° b·∫£n s·ª≠ d·ª•ng Gemini AI mi·ªÖn ph√≠' 
                      : 'Ch·∫ø ƒë·ªô n√¢ng cao s·ª≠ d·ª•ng Kimi K2 cho k·∫øt qu·∫£ t·ªët h∆°n'}
                  </p>
                </div>
                
                <motion.div className="flex items-start gap-3.5 p-5 bg-blue-50/80 dark:bg-blue-950/50 rounded-2xl border border-blue-200/30 backdrop-blur-sm" whileHover={{
                scale: 1.01
              }} transition={{
                type: "spring",
                stiffness: 300
              }}>
                  <Info className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <p className="text-sm text-slate-700 dark:text-slate-300">Game ƒë∆∞·ª£c t·∫°o b·ªüi AI kh√¥ng h·∫≥n l√† ho√†n h·∫£o m√† s·∫Ω c√≥ m·ªôt s·ªë l·ªói c√≥ th·ªÉ ph√°t sinh trong qu√° tr√¨nh t·∫°o n√™n b·∫°n h√£y t·∫°o l·∫°i n·∫øu nh∆∞ c√≥ l·ªói nh√© !</p>
                </motion.div>
                
                <div className="flex justify-center gap-5 pt-4">
                  <Button variant="outline" onClick={handleCancel} className="min-w-[130px] border-2 border-blue-200/50 hover:border-blue-300/60 hover:bg-blue-50/50 rounded-xl transition-all duration-300">
                    H·ªßy
                  </Button>
                  <motion.div whileHover={{
                  scale: 1.02
                }} whileTap={{
                  scale: 0.98
                }}>
                    <Button onClick={handleSubmit} disabled={isGenerating || !content.trim()} className="min-w-[220px] bg-gradient-to-r from-blue-600 to-sky-600 hover:from-blue-700 hover:to-sky-700 rounded-xl shadow-lg shadow-blue-500/25 transition-all duration-300 font-medium">
                      <SparklesIcon className="h-5 w-5 mr-2.5" />
                      T·∫°o v·ªõi AI
                    </Button>
                  </motion.div>
                </div>
              </motion.div>
            </div>
          </Card>
        </motion.div>
      </div>
    </div>;
};
export default CustomGameForm;