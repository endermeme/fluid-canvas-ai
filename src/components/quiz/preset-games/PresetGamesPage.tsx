
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  BrainCircuit, Lightbulb, PuzzlePiece, Clock4, 
  Dices, HeartHandshake, PenTool, ArrowLeft, Home
} from 'lucide-react';

const gameTypes = [
  {
    id: 'quiz',
    name: 'Tr·∫Øc Nghi·ªám',
    description: 'Tr√≤ ch∆°i tr·∫Øc nghi·ªám v·ªõi nhi·ªÅu l·ª±a ch·ªçn',
    icon: BrainCircuit,
    color: 'from-blue-500 to-indigo-600',
    difficulty: 'D·ªÖ - Trung b√¨nh'
  },
  {
    id: 'flashcards',
    name: 'Th·∫ª Ghi Nh·ªõ',
    description: 'Th·∫ª l·∫≠t hai m·∫∑t ƒë·ªÉ h·ªçc v√† ghi nh·ªõ th√¥ng tin',
    icon: Lightbulb,
    color: 'from-yellow-500 to-orange-600',
    difficulty: 'D·ªÖ'
  },
  {
    id: 'matching',
    name: 'N·ªëi T·ª´',
    description: 'N·ªëi c√°c c·∫∑p t·ª´ t∆∞∆°ng ·ª©ng v·ªõi nhau',
    icon: PuzzlePiece,
    color: 'from-green-500 to-emerald-600',
    difficulty: 'Trung b√¨nh'
  },
  {
    id: 'memory',
    name: 'Tr√≤ Ch∆°i Ghi Nh·ªõ',
    description: 'L·∫≠t v√† gh√©p c·∫∑p c√°c th·∫ª gi·ªëng nhau',
    icon: BrainCircuit,
    color: 'from-purple-500 to-violet-600',
    difficulty: 'Trung b√¨nh - Kh√≥'
  },
  {
    id: 'ordering',
    name: 'S·∫Øp X·∫øp C√¢u',
    description: 'S·∫Øp x·∫øp c√°c t·ª´ theo th·ª© t·ª± ƒë√∫ng',
    icon: Dices,
    color: 'from-pink-500 to-rose-600',
    difficulty: 'Kh√≥'
  },
  {
    id: 'wordsearch',
    name: 'T√¨m T·ª´',
    description: 'T√¨m c√°c t·ª´ ·∫©n trong b·∫£ng ch·ªØ c√°i',
    icon: PenTool,
    color: 'from-cyan-500 to-blue-600',
    difficulty: 'Trung b√¨nh'
  },
  {
    id: 'truefalse',
    name: 'ƒê√∫ng hay Sai',
    description: 'Ki·ªÉm tra ki·∫øn th·ª©c v·ªõi c√°c c√¢u h·ªèi ƒë√∫ng/sai',
    icon: Clock4,
    color: 'from-red-500 to-pink-600',
    difficulty: 'D·ªÖ - Trung b√¨nh'
  }
];

const PresetGamesPage: React.FC = () => {
  const navigate = useNavigate();

  const handleGameSelect = (gameType: string) => {
    navigate(`/preset-games/${gameType}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Header v·ªõi navigation */}
      <header className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-700 text-white shadow-lg border-b border-white/20">
        <div className="flex justify-between items-center p-4">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 border border-white/30 backdrop-blur-sm transition-all duration-200 hover:scale-105"
              onClick={() => navigate("/")}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Quay l·∫°i
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              className="text-white hover:bg-white/20 border border-white/30 backdrop-blur-sm transition-all duration-200 hover:scale-105"
              onClick={() => navigate("/")}
            >
              <Home className="h-4 w-4 mr-2" />
              Trang ch·ªß
            </Button>
          </div>

          <div className="flex-1 text-center">
            <h1 className="text-xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
              Ch·ªçn Lo·∫°i Game
            </h1>
          </div>
          
          <div className="w-24"></div> {/* Spacer for centering */}
        </div>
      </header>

      {/* Main content v·ªõi spacing t·ªët h∆°n */}
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          {/* Title section v·ªõi margin t·ªët h∆°n */}
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">
              Ch·ªçn Lo·∫°i Tr√≤ Ch∆°i
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Kh√°m ph√° c√°c lo·∫°i tr√≤ ch∆°i h·ªçc t·∫≠p kh√°c nhau. M·ªói game ƒë∆∞·ª£c thi·∫øt k·∫ø 
              ƒë·ªÉ gi√∫p b·∫°n h·ªçc m·ªôt c√°ch th√∫ v·ªã v√† hi·ªáu qu·∫£.
            </p>
          </div>

          {/* Game cards grid v·ªõi spacing ƒë·∫πp h∆°n */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {gameTypes.map((game) => {
              const IconComponent = game.icon;
              
              return (
                <Card 
                  key={game.id}
                  className="group cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-xl border-0 bg-white/80 backdrop-blur-sm overflow-hidden"
                  onClick={() => handleGameSelect(game.id)}
                >
                  <div className={`h-2 bg-gradient-to-r ${game.color}`}></div>
                  
                  <CardHeader className="pb-4">
                    <div className="flex items-center gap-3 mb-3">
                      <div className={`p-3 rounded-xl bg-gradient-to-r ${game.color} text-white shadow-lg`}>
                        <IconComponent className="h-6 w-6" />
                      </div>
                      <div>
                        <CardTitle className="text-lg font-bold text-gray-800 group-hover:text-blue-600 transition-colors">
                          {game.name}
                        </CardTitle>
                        <div className="text-xs text-gray-500 font-medium">
                          {game.difficulty}
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="pt-0">
                    <CardDescription className="text-gray-600 text-sm leading-relaxed mb-4">
                      {game.description}
                    </CardDescription>
                    
                    <Button 
                      className={`w-full bg-gradient-to-r ${game.color} hover:shadow-lg transition-all duration-200 text-white font-medium`}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleGameSelect(game.id);
                      }}
                    >
                      Ch·ªçn Game N√†y
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Footer info v·ªõi margin t·ªët h∆°n */}
          <div className="text-center mt-12 pt-8 border-t border-gray-200">
            <p className="text-gray-500 text-sm">
              üí° M·ªói game c√≥ th·ªÉ ƒë∆∞·ª£c t√πy ch·ªânh theo ƒë·ªô kh√≥ v√† ch·ªß ƒë·ªÅ c·ªßa b·∫°n
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PresetGamesPage;
