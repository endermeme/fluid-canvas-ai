
/**
 * L√†m s·∫°ch v√† s·ª≠a ch·ªØa code HTML, CSS v√† JavaScript t·ª´ Gemini
 */
export const sanitizeGameCode = (content: string): string => {
  let sanitized = content;
  
  // Lo·∫°i b·ªè c√∫ ph√°p markdown code block
  sanitized = sanitized.replace(/```html|```css|```js|```javascript|```/g, '');
  
  // Lo·∫°i b·ªè backticks th·ª´a
  sanitized = sanitized.replace(/`/g, '');
  
  // S·ª≠a tham s·ªë h√†m
  sanitized = sanitized.replace(/function\s+(\w+)\s*\(\$2\)/g, (match, funcName) => {
    if (funcName === 'drawSegment') return 'function drawSegment(index, color, text)';
    if (funcName === 'getWinningSegment') return 'function getWinningSegment(finalAngle)';
    if (funcName === 'spinWheel') return 'function spinWheel()';
    if (funcName === 'drawWheel') return 'function drawWheel()';
    if (funcName.includes('ease') || funcName.includes('animate')) 
      return `function ${funcName}(t, b, c, d)`;
    return match;
  });
  
  // S·ª≠a template literals
  sanitized = sanitized.replace(/(\w+\.style\.transform\s*=\s*)rotate\(\$\{([^}]+)\}([^)]*)\)/g, 
    "$1`rotate(${$2}$3)`");
  
  sanitized = sanitized.replace(/(\w+\.textContent\s*=\s*)([^;"`']*)\$\{([^}]+)\}([^;"`']*);/g, 
    "$1`$2${$3}$4`;");
  
  // S·ª≠a escaping backticks trong template literals
  sanitized = sanitized.replace(/\\`/g, '`');
  
  // ƒê·∫£m b·∫£o th·∫ª script ƒë√≥ng ƒë√∫ng c√°ch
  if (sanitized.includes('<script>') && !sanitized.includes('</script>')) {
    sanitized += '\n</script>';
  }
  
  // Th√™m x·ª≠ l√Ω l·ªói cho ng·ªØ c·∫£nh canvas
  if (sanitized.includes('getContext') && !sanitized.includes('if (!ctx)')) {
    sanitized = sanitized.replace(
      /const\s+ctx\s*=\s*canvas\.getContext\(['"]2d['"]\);/g,
      "const ctx = canvas.getContext('2d');\n  if (!ctx) { console.error('Canvas context not available'); return; }"
    );
  }
  
  // ƒê·∫£m b·∫£o JavaScript ƒë∆∞·ª£c b·ªçc trong h√†m t·ª± th·ª±c thi
  if (sanitized.includes('<script>') && !sanitized.includes('window.onload') && !sanitized.includes('(function() {')) {
    sanitized = sanitized.replace(
      /<script>([\s\S]*?)<\/script>/g,
      "<script>\n(function() {\n$1\n})();\n</script>"
    );
  }
  
  // S·ª≠a document.getElementById calls ƒë·ªÉ ki·ªÉm tra null
  sanitized = sanitized.replace(
    /const\s+(\w+)\s*=\s*document\.getElementById\(['"]([^'"]+)['"]\);/g,
    "const $1 = document.getElementById('$2');\nif (!$1) { console.error('Element #$2 not found'); return; }"
  );
  
  // Th√™m x·ª≠ l√Ω l·ªói to√†n c·ª•c
  if (!sanitized.includes('window.onerror')) {
    sanitized = sanitized.replace(
      /<\/body>/,
      `  <script>
    window.onerror = (message, source, lineno, colno, error) => {
      console.error('Game error:', { message, source, lineno, colno, stack: error?.stack });
      return true;
    };
    
    // ƒê·∫£m b·∫£o DOM ƒë√£ ƒë∆∞·ª£c t·∫£i ho√†n to√†n tr∆∞·ªõc khi th·ª±c thi script
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Game DOM fully loaded and ready');
    });
  </script>
</body>`
    );
  }
  
  // ƒê·∫£m b·∫£o c√≥ DOCTYPE v√† c·∫•u tr√∫c HTML c∆° b·∫£n
  if (!sanitized.includes('<!DOCTYPE html>')) {
    if (sanitized.includes('<html')) {
      sanitized = `<!DOCTYPE html>${sanitized}`;
    } else {
      sanitized = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Game</title>
</head>
<body>
  ${sanitized}
</body>
</html>`;
    }
  }
  
  // Th√™m log ƒë·ªÉ debug
  console.log("üßπ Sanitized game code:", sanitized.substring(0, 200) + "...");
  
  return sanitized;
};

/**
 * Tr√≠ch xu·∫•t ph·∫ßn HTML, CSS v√† JavaScript ri√™ng bi·ªát
 * t·ª´ code HTML t·ªïng h·ª£p
 */
export const extractCodeParts = (htmlContent: string): { html: string, css: string, js: string } => {
  const result = {
    html: htmlContent,
    css: '',
    js: ''
  };
  
  // Tr√≠ch xu·∫•t CSS t·ª´ th·∫ª style
  const styleMatches = htmlContent.match(/<style[^>]*>([\s\S]*?)<\/style>/gi);
  if (styleMatches) {
    result.css = styleMatches.map(match => {
      return match.replace(/<\/?style[^>]*>/gi, '');
    }).join('\n\n');
  }
  
  // Tr√≠ch xu·∫•t JavaScript t·ª´ th·∫ª script
  const scriptMatches = htmlContent.match(/<script[^>]*>([\s\S]*?)<\/script>/gi);
  if (scriptMatches) {
    result.js = scriptMatches.map(match => {
      return match.replace(/<\/?script[^>]*>/gi, '');
    }).join('\n\n');
  }
  
  // Lo·∫°i b·ªè c√°c th·∫ª style v√† script kh·ªèi HTML
  result.html = htmlContent
    .replace(/<style[^>]*>([\s\S]*?)<\/style>/gi, '')
    .replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, '')
    .trim();
  
  return result;
};
