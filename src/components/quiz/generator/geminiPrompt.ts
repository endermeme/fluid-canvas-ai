
/**
 * Prompt template n√¢ng cao cho game ch·∫•t l∆∞·ª£ng cao
 */

import { PromptOptions } from './types';

export const createGameGenerationPrompt = (options: PromptOptions): string => {
  const { topic, language = 'vi' } = options;
  
  // Prompt chi ti·∫øt v√† chuy√™n nghi·ªáp
  const prompt = `# NHI·ªÜM V·ª§: T·∫°o game HTML5 chuy√™n nghi·ªáp v·ªÅ "${topic}"

## Y√äU C·∫¶U CH·∫§T L∆Ø·ª¢NG CAO:

### üéÆ LOGIC GAME CHUY√äN NGHI·ªÜP:
- Code nh∆∞ m·ªôt senior developer: clean, modular, well-structured
- Implement proper game states: MENU, PLAYING, PAUSED, GAME_OVER, WIN
- Anti-cheat mechanisms: validate moves, prevent console manipulation
- Smart AI logic n·∫øu c√≥ bot/enemy
- Collision detection ch√≠nh x√°c
- Physics realistic (gravity, momentum, friction)
- Event handling robust, prevent spam clicking
- Score system cannot be easily hacked
- Progress saving v√† validation

### üé® GRAPHICS & UI EXCELLENCE:
- Modern UI design v·ªõi CSS3 animations
- Gradient backgrounds, shadows, transitions
- Particle effects v·ªõi Canvas 2D
- Smooth animations (60fps target)
- Responsive design cho m·ªçi m√†n h√¨nh
- Beautiful color palette v√† typography
- Loading animations v√† micro-interactions
- Visual feedback cho m·ªçi action
- Progressive difficulty v·ªõi visual indicators

### üîß TECHNICAL REQUIREMENTS:
- Full viewport coverage: 100vw x 100vh, no margins/padding
- Touch-friendly: minimum 44px touch targets
- Performance optimized: requestAnimationFrame
- Memory management: cleanup intervals/listeners
- Error handling v√† graceful degradation
- Cross-browser compatibility
- Mobile-first responsive design
- Accessibility features (keyboard navigation)

### üéØ GAME MECHANICS DEPTH:
- Multiple difficulty levels
- Achievement system
- Combo systems v√† multipliers
- Power-ups v√† special abilities
- Dynamic obstacles/challenges
- Procedural generation elements
- Sound effects (HTML5 Audio)
- Visual effects v√† screen shake
- Meaningful player choices

### üõ°Ô∏è ANTI-BYPASS MEASURES:
- Obfuscated critical variables
- Server-side style validation (simulate)
- Time-based challenges cannot be skipped
- Multiple validation layers
- Hidden checkpoints
- Randomized game elements
- Input rate limiting
- Prevent inspect element cheating

## OUTPUT FORMAT:
Tr·∫£ v·ªÅ CH√çNH X√ÅC file HTML5 ho√†n ch·ªânh v·ªõi:
- DOCTYPE html declaration
- Meta viewport cho mobile
- Embedded CSS v·ªõi advanced styling
- JavaScript v·ªõi modern ES6+ features
- Game loop v·ªõi requestAnimationFrame
- Proper error handling
- Performance monitoring
- Debug console logs

## STYLE GUIDELINES:
- Use CSS Grid/Flexbox cho layout
- CSS Variables cho theming
- Smooth transitions: transition: all 0.3s ease
- Box shadows: box-shadow: 0 10px 30px rgba(0,0,0,0.3)
- Modern borders: border-radius: 15px
- Typography: system fonts, proper line-height
- Color theory: complementary colors
- Visual hierarchy: size, color, spacing

## JAVASCRIPT BEST PRACTICES:
- Use const/let, avoid var
- Arrow functions cho callbacks
- Template literals cho strings
- Destructuring assignments
- Classes cho game objects
- Modules pattern
- Error boundaries
- Performance profiling

QUAN TR·ªåNG: Kh√¥ng gi·∫£i th√≠ch, ch·ªâ tr·∫£ v·ªÅ HTML ho√†n ch·ªânh. Game ph·∫£i th·ªÉ hi·ªán skill coding senior level!`;

  return prompt;
};

// Prompt ri√™ng cho ch·∫ø ƒë·ªô Flash - t·∫≠p trung v√†o speed v√† efficiency
export const createFlashGamePrompt = (options: PromptOptions): string => {
  const { topic, language = 'vi' } = options;
  
  const prompt = `# FLASH MODE: T·∫°o game "${topic}" - T·ªëc ƒë·ªô cao, Logic th√¥ng minh

## FOCUS AREAS:
1. **Code Efficiency**: Minimal DOM manipulation, efficient algorithms
2. **Smart Logic**: Clever game mechanics, anti-cheat built-in
3. **Visual Impact**: Maximum visual appeal v·ªõi minimal code
4. **Performance**: 60fps guaranteed, memory optimized

## CORE REQUIREMENTS:
- Single HTML file v·ªõi embedded CSS/JS
- Game loop t·ªëi ∆∞u v·ªõi requestAnimationFrame
- Smart state management
- Touch + keyboard controls
- Auto-scaling UI cho m·ªçi device
- Beautiful animations v·ªõi CSS transforms
- Anti-bypass logic embedded
- Professional game feel

## ADVANCED FEATURES:
- Procedural difficulty scaling
- Visual feedback h·ªá th·ªëng
- Particle effects nh·∫π
- Sound integration ready
- Achievement tracking
- Combo/streak systems
- Dynamic theming
- Error recovery mechanisms

Tr·∫£ v·ªÅ HTML ho√†n ch·ªânh, ready-to-play, professional quality!`;

  return prompt;
};

// Prompt cho Super Thinking mode - ph√¢n t√≠ch s√¢u
export const createSuperThinkingAnalysisPrompt = (topic: string): string => {
  return `# PH√ÇN T√çCH GAME DESIGN CHO: "${topic}"

H√£y ph√¢n t√≠ch chi ti·∫øt c√°c kh√≠a c·∫°nh sau:

## 1. GAME MECHANICS ANALYSIS:
- Core gameplay loop v√† player motivation
- Difficulty curve v√† progression system
- Win/lose conditions v√† balance
- Player agency v√† meaningful choices
- Replayability factors

## 2. TECHNICAL ARCHITECTURE:
- Optimal code structure cho performance
- State management strategy
- Event handling patterns
- Animation v√† rendering approach
- Memory management considerations

## 3. UI/UX DESIGN:
- Visual hierarchy v√† information architecture
- Color psychology v√† branding
- Accessibility considerations
- Mobile-first responsive strategy
- User flow optimization

## 4. ANTI-CHEAT STRATEGY:
- Common exploit patterns to prevent
- Validation layers needed
- Obfuscation techniques
- Time-based security measures
- Client-side protection methods

## 5. ENHANCEMENT OPPORTUNITIES:
- Advanced features ƒë·ªÉ differentiate
- Performance optimization points
- User engagement mechanics
- Scalability considerations
- Future feature hooks

Tr·∫£ v·ªÅ ph√¢n t√≠ch chi ti·∫øt trong 300 t·ª´, t·∫≠p trung v√†o implementation specifics.`;
};

export default createGameGenerationPrompt;
