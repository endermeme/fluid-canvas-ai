
import { MiniGame } from './types';

/**
 * Tr√≠ch xu·∫•t code t·ª´ ƒë·ªãnh d·∫°ng markdown
 * @param text Ph·∫£n h·ªìi t·ª´ Gemini
 */
const extractCodeFromMarkdown = (text: string): { html: string, css: string, js: string } => {
  console.log("üîç B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t code t·ª´ markdown");
  
  // Kh·ªüi t·∫°o c√°c ph·∫ßn code
  let html = '';
  let css = '';
  let js = '';
  
  // T√¨m code block HTML
  const htmlMatch = text.match(/```html\n([\s\S]*?)```/);
  if (htmlMatch && htmlMatch[1]) {
    html = htmlMatch[1].trim();
    console.log("‚úÖ ƒê√£ t√¨m th·∫•y HTML code block");
  } else {
    // T√¨m HTML kh√¥ng n·∫±m trong code block
    const htmlRegex = /<html[\s\S]*?<\/html>/i;
    const htmlTagMatch = text.match(htmlRegex);
    if (htmlTagMatch) {
      html = htmlTagMatch[0];
      console.log("‚úÖ ƒê√£ t√¨m th·∫•y tag HTML");
    }
  }
  
  // T√¨m code block CSS
  const cssMatch = text.match(/```css\n([\s\S]*?)```/);
  if (cssMatch && cssMatch[1]) {
    css = cssMatch[1].trim();
    console.log("‚úÖ ƒê√£ t√¨m th·∫•y CSS code block");
  }
  
  // T√¨m code block JavaScript
  const jsMatch = text.match(/```(js|javascript)\n([\s\S]*?)```/);
  if (jsMatch && jsMatch[2]) {
    js = jsMatch[2].trim();
    console.log("‚úÖ ƒê√£ t√¨m th·∫•y JS code block");
  }
  
  // N·∫øu kh√¥ng t√¨m th·∫•y c√°c block ri√™ng bi·ªát, ki·ªÉm tra xem c√≥ block chung kh√¥ng
  if (!html && !css && !js) {
    const codeBlockMatch = text.match(/```([\s\S]*?)```/);
    if (codeBlockMatch && codeBlockMatch[1]) {
      // Gi·∫£ ƒë·ªãnh ƒë√¢y l√† HTML c√≥ c·∫£ CSS v√† JS b√™n trong
      html = codeBlockMatch[1].trim();
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y code blocks ri√™ng bi·ªát, s·ª≠ d·ª•ng to√†n b·ªô code block");
    }
  }
  
  // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y code, l·∫•y to√†n b·ªô text (c√≥ th·ªÉ l√† HTML plain)
  if (!html && !css && !js) {
    // Lo·∫°i b·ªè c√°c ph·∫ßn markdown kh√¥ng c·∫ßn thi·∫øt
    html = text.replace(/^#.*$/gm, '').trim();
    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y code blocks, s·ª≠ d·ª•ng to√†n b·ªô text");
  }
  
  // Tr·∫£ v·ªÅ c√°c ph·∫ßn code ƒë√£ t√¨m th·∫•y
  return { html, css, js };
};

/**
 * ƒê·ªãnh d·∫°ng n·ªôi dung game v·ªõi HTML, CSS v√† JS
 * @param content N·ªôi dung t·ª´ Gemini
 */
const formatGameContent = (content: string): string => {
  if (!content) return '';
  
  try {
    // T√¨m xem content ƒë√£ l√† HTML ƒë·∫ßy ƒë·ªß ch∆∞a
    const isFullHtml = content.includes('<!DOCTYPE html>') || content.includes('<html');
    
    if (isFullHtml) {
      console.log("üîÑ Content ƒë√£ l√† HTML ƒë·∫ßy ƒë·ªß, gi·ªØ nguy√™n");
      return content;
    }
    
    // N·∫øu kh√¥ng ph·∫£i HTML ƒë·∫ßy ƒë·ªß, tr√≠ch xu·∫•t c√°c ph·∫ßn code
    const { html, css, js } = extractCodeFromMarkdown(content);
    
    // T·∫°o HTML ƒë·∫ßy ƒë·ªß
    const formattedContent = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Game</title>
  <style>
${css}
  </style>
</head>
<body>
${html}
  <script>
${js}
  </script>
</body>
</html>`;

    return formattedContent;
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªãnh d·∫°ng n·ªôi dung:', error);
    return content;
  }
};

/**
 * Parse ph·∫£n h·ªìi t·ª´ Gemini
 * @param text Ph·∫£n h·ªìi t·ª´ Gemini
 * @param topic Ch·ªß ƒë·ªÅ game
 */
export const parseGeminiResponse = (text: string, topic: string): MiniGame => {
  console.log("üî∑ Gemini: B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ph·∫£n h·ªìi");
  
  try {
    // Tr√≠ch xu·∫•t n·ªôi dung HTML v·ªõi ƒë·ªãnh d·∫°ng t·ªët h∆°n
    const htmlContent = formatGameContent(text);
    
    // Log HTML ƒë√£ ƒë·ªãnh d·∫°ng ƒë·ªÉ debug
    console.log("üî∑ Gemini: HTML ƒë√£ ƒë·ªãnh d·∫°ng", htmlContent.substring(0, 500) + "...");
    
    // Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ t·ª´ HTML
    let title = topic;
    const titleMatch = htmlContent.match(/<title>(.*?)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      title = titleMatch[1].replace(/<[^>]*>/g, '').trim();
    }
    
    return {
      title: title,
      description: "Generated HTML game content",
      content: htmlContent
    };
  } catch (error) {
    console.error("‚ùå Gemini: L·ªói khi tr√≠ch xu·∫•t n·ªôi dung:", error);
    
    // T·∫°o trang l·ªói t·ªëi thi·ªÉu
    const errorHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Error: ${topic}</title>
        <style>
          body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            text-align: center;
            color: #333;
          }
          .error-container {
            background-color: #fee2e2;
            border: 1px solid #ef4444;
            border-radius: 8px;
            padding: 20px;
          }
          h1 { color: #b91c1c; }
        </style>
      </head>
      <body>
        <div class="error-container">
          <h1>Error Generating Game</h1>
          <p>Sorry, there was a problem creating your game about "${topic}".</p>
          <p>Please try again or check the console for more details.</p>
        </div>
      </body>
      </html>
    `;
    
    return {
      title: `Error: ${topic}`,
      description: "Error generating content",
      content: errorHtml
    };
  }
};

// Th√™m h√†m tr√¨nh b√†y cho c·∫≠p nh·∫≠t ri√™ng
export const formatJavaScript = (code: string): string => {
  if (!code.trim()) return '';
  
  try {
    let formattedCode = code
      .replace(/\/\*[\s\S]*?\*\//g, '') // Lo·∫°i b·ªè block comments
      .replace(/\/\/[^\n]*/g, '') // Lo·∫°i b·ªè line comments
      .trim();
    
    // ƒê·ªãnh d·∫°ng JS v·ªõi indentation v√† line breaks
    const lines = formattedCode.split('\n');
    let indentLevel = 1; // B·∫Øt ƒë·∫ßu v·ªõi 1 m·ª©c indent (v√¨ ch√∫ng ta ƒëang ·ªü trong th·∫ª script)
    let formattedLines = [];
    
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i].trim();
      if (!line) continue;
      
      // Gi·∫£m indent khi g·∫∑p d·∫•u } ƒë√≥ng
      if (line.startsWith('}')) {
        indentLevel = Math.max(0, indentLevel - 1);
      }
      
      // Th√™m indent hi·ªán t·∫°i
      formattedLines.push('  '.repeat(indentLevel) + line);
      
      // TƒÉng indent sau khi g·∫∑p d·∫•u { m·ªü
      if (line.endsWith('{')) {
        indentLevel++;
      }
    }
    
    return formattedLines.join('\n');
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªãnh d·∫°ng JavaScript:', error);
    return code;
  }
};

export const formatCss = (code: string): string => {
  if (!code.trim()) return '';
  
  try {
    // ƒê·ªãnh d·∫°ng CSS c∆° b·∫£n
    let formattedCode = code
      .replace(/\/\*[\s\S]*?\*\//g, '') // Lo·∫°i b·ªè comments
      .trim();
    
    // ƒê·ªãnh d·∫°ng CSS v·ªõi indentation v√† line breaks
    formattedCode = formattedCode
      .replace(/\s*\{\s*/g, ' {\n  ')
      .replace(/;\s*/g, ';\n  ')
      .replace(/\s*}\s*/g, '\n}\n')
      .replace(/\n\s*\n/g, '\n'); // Lo·∫°i b·ªè double line breaks
    
    return formattedCode;
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªãnh d·∫°ng CSS:', error);
    return code;
  }
};
