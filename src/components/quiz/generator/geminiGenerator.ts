
import { MiniGame } from './types';
import { GameSettingsData } from '../types';
import { getGameTypeByTopic } from '../gameTypes';

export const generateWithGemini = async (
  model: any, 
  topic: string, 
  settings?: GameSettingsData
): Promise<MiniGame | null> => {
  // Get game type from topic to provide better context for the AI
  const gameType = getGameTypeByTopic(topic);
  const gameDescription = gameType ? gameType.description : "tr√≤ ch∆°i t∆∞∆°ng t√°c";
  
  console.log(`üî∑ Gemini: B·∫Øt ƒë·∫ßu t·∫°o game "${topic}" - Lo·∫°i: ${gameType?.name || "Kh√¥ng x√°c ƒë·ªãnh"}`);
  console.log(`üî∑ Gemini: C√†i ƒë·∫∑t: ${JSON.stringify(settings || {})}`);
  
  const settingsPrompt = settings ? `
    H√£y t·∫°o v·ªõi c√°c c√†i ƒë·∫∑t sau:
    - ƒê·ªô kh√≥: ${settings.difficulty}
    - S·ªë l∆∞·ª£ng c√¢u h·ªèi/th·ª≠ th√°ch: ${settings.questionCount}
    - Th·ªùi gian cho m·ªói c√¢u h·ªèi/th·ª≠ th√°ch: ${settings.timePerQuestion} gi√¢y
    - Th·ªÉ lo·∫°i: ${settings.category}
  ` : '';

  const prompt = `
    T·∫°o m·ªôt minigame t∆∞∆°ng t√°c ho√†n ch·ªânh ƒë·ªÉ h·ªçc v·ªÅ ch·ªß ƒë·ªÅ "${topic}" d∆∞·ªõi d·∫°ng ${gameDescription}.
    ${settingsPrompt}
    
    H∆Ø·ªöNG D·∫™N CHI TI·∫æT:
    1. T·∫†O M·ªòT FILE HTML ƒê·∫¶Y ƒê·ª¶:
       - Bao g·ªìm ƒë·∫ßy ƒë·ªß HTML, CSS v√† JavaScript trong m·ªôt file HTML duy nh·∫•t
       - S·ª≠ d·ª•ng th·∫ª <style> cho CSS v√† th·∫ª <script> cho JavaScript
       - Code ph·∫£i ƒë∆°n gi·∫£n, hi·ªáu qu·∫£ v√† KH√îNG c√≥ c√°c th√†nh ph·∫ßn kh√¥ng c·∫ßn thi·∫øt
    
    2. Y√äU C·∫¶U K·ª∏ THU·∫¨T:
       - Code ph·∫£i s·∫°ch s·∫Ω v√† c√≥ indentation ƒë√∫ng
       - Game ph·∫£i responsive, ho·∫°t ƒë·ªông t·ªët tr√™n c·∫£ ƒëi·ªán tho·∫°i v√† m√°y t√≠nh
       - KH√îNG s·ª≠ d·ª•ng th∆∞ vi·ªán b√™n ngo√†i hay CDN
       - Game ph·∫£i chi·∫øm to√†n b·ªô m√†n h√¨nh
       - ƒê·∫£m b·∫£o t·∫•t c·∫£ bi·∫øn ƒë·ªÅu ƒë∆∞·ª£c khai b√°o ƒë√∫ng v·ªõi let/const/var
       - T·∫•t c·∫£ m√£ JavaScript ph·∫£i ƒë∆∞·ª£c ƒë·∫∑t v√†o event DOMContentLoaded
       - ƒê·∫£m b·∫£o JSON tr·∫£ v·ªÅ KH√îNG ch·ª©a k√Ω t·ª± ƒëi·ªÅu khi·ªÉn ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát
    
    3. T√çNH NƒÇNG GAME:
       - Giao di·ªán h·∫•p d·∫´n v·ªõi m√†u s·∫Øc v√† animation
       - T√≠nh nƒÉng t∆∞∆°ng t√°c nh∆∞ ƒë·∫øm ƒëi·ªÉm, hi·ªÉn th·ªã th·ªùi gian
       - C√≥ m√†n h√¨nh k·∫øt th√∫c game v√† n√∫t ch∆°i l·∫°i
       - Ki·ªÉm tra logic game k·ªπ ƒë·ªÉ tr√°nh bug v√† l·ªói
       - LO·∫†I B·ªé nh·ªØng th√†nh ph·∫ßn kh√¥ng c·∫ßn thi·∫øt ho·∫∑c kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ
       
    4. S·ª¨ D·ª§NG H√åNH ·∫¢NH:
       - N·∫øu game c·∫ßn h√¨nh ·∫£nh, H√ÉY S·ª¨ D·ª§NG URL h√¨nh ·∫£nh t·ª´ Google
       - B·∫ÆT BU·ªòC gi·ªØ nguy√™n URL h√¨nh ·∫£nh, KH√îNG ƒë∆∞·ª£c thay ƒë·ªïi ho·∫∑c x√≥a URL
       - ƒê·∫£m b·∫£o URL h√¨nh ·∫£nh ƒë∆∞·ª£c ch√®n ch√≠nh x√°c v√†o m√£ HTML
       - S·ª≠ d·ª•ng h√¨nh ·∫£nh li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ v√† ph√π h·ª£p v·ªõi n·ªôi dung game
    
    Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON v·ªõi ƒë·ªãnh d·∫°ng sau:
    {
      "title": "T√™n minigame",
      "description": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ minigame",
      "content": "<ƒë√¢y l√† to√†n b·ªô m√£ HTML ƒë·∫ßy ƒë·ªß, bao g·ªìm c·∫£ CSS v√† JavaScript>"
    }
    
    QUAN TR·ªåNG:
    - Tr·∫£ v·ªÅ JSON ho√†n ch·ªânh v√† h·ª£p l·ªá, KH√îNG ch·ª©a k√Ω t·ª± ƒëi·ªÅu khi·ªÉn, k√Ω t·ª± ƒë·∫∑c bi·ªát
    - M√£ HTML ph·∫£i l√† m·ªôt trang web ho√†n ch·ªânh v√† c√≥ th·ªÉ ch·∫°y ƒë·ªôc l·∫≠p
    - N·∫øu c√≥ s·ª≠ d·ª•ng h√¨nh ·∫£nh, PH·∫¢I GI·ªÆ NGUY√äN URL h√¨nh ·∫£nh v√† kh√¥ng ƒë∆∞·ª£c ch·ªânh s·ª≠a ho·∫∑c x√≥a ch√∫ng
    - KI·ªÇM TRA l·∫°i logic code v√† lo·∫°i b·ªè m·ªçi l·ªói tr∆∞·ªõc khi tr·∫£ v·ªÅ
  `;

  try {
    console.log("üî∑ Gemini: G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API...");
    const result = await model.generateContent(prompt);
    const response = result.response;
    const text = response.text();
    
    console.log("üî∑ Gemini: ƒê√£ nh·∫≠n ph·∫£n h·ªìi, ƒëang tr√≠ch xu·∫•t JSON...");
    
    // Enhanced JSON extraction and cleaning
    try {
      // Method 1: Try JSON.parse directly if it's valid JSON
      try {
        // Check if the entire response is a valid JSON
        const gameData = JSON.parse(text);
        console.log("üî∑ Gemini: JSON h·ª£p l·ªá, tr√≠ch xu·∫•t th√†nh c√¥ng");
        
        return {
          title: gameData.title || `Game v·ªÅ ${topic}`,
          description: gameData.description || `Minigame v·ªÅ ch·ªß ƒë·ªÅ ${topic}`,
          content: gameData.content || ''
        };
      } catch (directParseError) {
        console.log("üî∑ Gemini: Kh√¥ng th·ªÉ ph√¢n t√≠ch tr·ª±c ti·∫øp, th·ª≠ ph∆∞∆°ng ph√°p 2...");
      }
      
      // Method 2: Use regex to find and extract JSON object
      const jsonMatch = text.match(/{[\s\S]*}/);
      if (jsonMatch) {
        // Clean the JSON string - replace problematic characters
        const cleanedJson = jsonMatch[0]
          .replace(/[\u0000-\u001F\u007F-\u009F]/g, "") // Remove control characters
          .replace(/\\(?!["\\/bfnrt])/g, "") // Remove invalid escape sequences
          .replace(/\\n/g, "\\n") // Properly escape newlines
          .replace(/\\r/g, "\\r") // Properly escape carriage returns
          .replace(/\\t/g, "\\t") // Properly escape tabs
          .replace(/\\\\/g, "\\") // Fix double backslashes
          .replace(/\\"/g, '"') // Fix escaped quotes
          .replace(/'/g, "'") // Replace smart quotes
          .replace(/"/g, '"') // Replace smart quotes
          .replace(/[\u201C\u201D]/g, '"') // Replace smart quotes
          .replace(/[\u2018\u2019]/g, "'"); // Replace smart quotes
        
        console.log("üî∑ Gemini: ƒêang ph√¢n t√≠ch JSON t·ª´ ph·∫£n h·ªìi (ph∆∞∆°ng ph√°p 2)...");
        try {
          const gameData = JSON.parse(cleanedJson);
          
          console.log(`üî∑ Gemini: ƒê√£ t·∫°o th√†nh c√¥ng game "${gameData.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}"`);
          console.log(`üî∑ Gemini: M√¥ t·∫£: ${gameData.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`);
          console.log(`üî∑ Gemini: K√≠ch th∆∞·ªõc code: ${(gameData.content?.length || 0).toLocaleString()} k√Ω t·ª±`);
          
          return {
            title: gameData.title || `Game v·ªÅ ${topic}`,
            description: gameData.description || `Minigame v·ªÅ ch·ªß ƒë·ªÅ ${topic}`,
            content: gameData.content || ''
          };
        } catch (jsonError) {
          console.error("‚ùå Gemini: L·ªói ph√¢n t√≠ch JSON (ph∆∞∆°ng ph√°p 2):", jsonError);
          console.log("üî∑ Gemini: S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t th·ªß c√¥ng...");
        }
      }
      
      // Method 3: Manual extraction as final fallback
      console.log("üî∑ Gemini: S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t th·ªß c√¥ng (regex)...");
      const titleMatch = text.match(/"title"\s*:\s*"([^"]*)"/);
      const descriptionMatch = text.match(/"description"\s*:\s*"([^"]*)"/);
      const contentMatch = text.match(/"content"\s*:\s*"([\s\S]*?)(?:"\s*}|"\s*$)/);
      
      if (titleMatch || contentMatch) {
        console.log("üî∑ Gemini: Tr√≠ch xu·∫•t th√†nh c√¥ng b·∫±ng regex");
        return {
          title: titleMatch?.[1] || `Game v·ªÅ ${topic}`,
          description: descriptionMatch?.[1] || `Minigame v·ªÅ ch·ªß ƒë·ªÅ ${topic}`,
          content: contentMatch 
            ? contentMatch[1]
                .replace(/\\n/g, '\n')
                .replace(/\\"/g, '"')
                .replace(/\\t/g, '\t')
                .replace(/\\\\/g, '\\')
            : `<html><body><h1>Game v·ªÅ ${topic}</h1><p>Kh√¥ng th·ªÉ t·∫°o n·ªôi dung.</p></body></html>`
        };
      }
      
      // Last resort: Extract any HTML content
      const htmlMatch = text.match(/<html[\s\S]*<\/html>/i);
      if (htmlMatch) {
        console.log("üî∑ Gemini: Tr√≠ch xu·∫•t HTML th√†nh c√¥ng");
        return {
          title: `Game v·ªÅ ${topic}`,
          description: `Minigame v·ªÅ ch·ªß ƒë·ªÅ ${topic}`,
          content: htmlMatch[0]
        };
      }
      
      throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t JSON ho·∫∑c HTML t·ª´ ph·∫£n h·ªìi");
    } catch (extractionError) {
      console.error("‚ùå Gemini: L·ªói tr√≠ch xu·∫•t:", extractionError);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Gemini: L·ªói khi t·∫°o v·ªõi Gemini:", error);
    throw error; // Rethrow for retry mechanism
  }
};

export const tryGeminiGeneration = async (
  model: any,
  topic: string, 
  settings?: GameSettingsData, 
  retryCount = 0
): Promise<MiniGame | null> => {
  if (retryCount >= 3) { // Increase retry count to 3
    console.log("‚ö†Ô∏è Gemini: ƒê√£ ƒë·∫°t s·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa");
    return null;
  }
  
  try {
    console.log(`‚è≥ Gemini: L·∫ßn th·ª≠ ${retryCount + 1} cho ch·ªß ƒë·ªÅ: "${topic}"`);
    return await generateWithGemini(model, topic, settings);
  } catch (error) {
    console.error(`‚ùå Gemini: L·∫ßn th·ª≠ ${retryCount + 1} th·∫•t b·∫°i:`, error);
    // Wait a bit before retrying (increasing wait time with each retry)
    const waitTime = (retryCount + 1) * 1000;
    console.log(`‚è≥ Gemini: ƒê·ª£i ${waitTime/1000} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
    await new Promise(resolve => setTimeout(resolve, waitTime));
    return tryGeminiGeneration(model, topic, settings, retryCount + 1);
  }
};
