import {
  GoogleGenerativeAI,
  GoogleGenerativeAIResponseError,
  HarmBlockThreshold,
  HarmCategory,
} from '@google/generative-ai';
import { GameSettingsData } from '../types';
import { getGameTypeByTopic } from '../gameTypes';
import { MiniGame, AIGameGeneratorOptions } from './types';
import { 
  createGeminiClient, 
  logInfo, 
  logError, 
  logWarning, 
  logSuccess, 
  measureExecutionTime 
} from './apiUtils';
import { tryGeminiGeneration } from './geminiGenerator';
import { createFallbackGame } from './fallbackGenerator';

// S·ª≠ d·ª•ng API key c·ª©ng
const API_KEY = 'AIzaSyB-X13dE3qKEURW8DxLmK56Vx3lZ1c8IfA';
const SOURCE = "AI_GENERATOR";

// Singleton instance
let instance: AIGameGenerator | null = null;

const MODEL_NAME = "gemini-1.5-pro";
const MAX_RETRIES = 3;
const RETRY_DELAY = 1500;

const REQUIRES_IMAGES_KEYWORDS = [
  'memory card',
  'memory match',
  'memory game',
  'matching pairs',
  'find the pair',
  'match the cards',
  'matching game',
  'picture matching',
  'image pairing',
];

export class AIGameGenerator {
  private genAI: GoogleGenerativeAI;
  private model: any;
  private modelName: string;
  private canvasMode: boolean = true;
  private initialized: boolean = false;
  private apiKey: string;

  constructor(apiKey: string = API_KEY, options?: { modelName?: string; canvasMode?: boolean }) {
    // Singleton pattern - return existing instance if available
    if (instance) {
      return instance;
    }
    
    this.apiKey = apiKey;
    this.initialize(options);
    instance = this;
  }

  private initialize(options?: { modelName?: string; canvasMode?: boolean }): void {
    if (this.initialized) return;
    
    logInfo(SOURCE, "Initializing AI game generator");
    this.modelName = options?.modelName || 'gemini-2.0-flash';
    this.canvasMode = options?.canvasMode || true;
    
    logInfo(SOURCE, `Using model ${this.modelName}`);
    logInfo(SOURCE, `Canvas mode: ${this.canvasMode ? 'ON' : 'OFF'}`);
    
    try {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
      this.model = this.genAI.getGenerativeModel({
        model: MODEL_NAME,
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
          {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
          },
        ],
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 1,
          maxOutputTokens: 8192,
        },
      });
      this.initialized = true;
      
      console.log(
        `%c ü§ñ AI GENERATOR INITIALIZED %c ${MODEL_NAME}`,
        'background: #4285f4; color: white; padding: 2px 6px; border-radius: 4px; font-weight: bold;',
        'font-weight: bold; color: #4285f4;'
      );
      console.log('%c üìö Model', 'font-weight: bold; color: #4285f4;', MODEL_NAME);
      console.log('%c ‚öôÔ∏è Config', 'font-weight: bold; color: #4285f4;', {
        temperature: 0.9,
        topK: 1,
        topP: 1,
        maxOutputTokens: 8192,
        maxRetries: MAX_RETRIES,
        retryDelay: `${RETRY_DELAY}ms`
      });
    } catch (error) {
      console.group(
        '%c ‚ùå AI GENERATOR INITIALIZATION ERROR',
        'background: #d73a49; color: white; padding: 2px 6px; border-radius: 4px; font-weight: bold;'
      );
      console.error('%c üö® Error Details', 'font-weight: bold; color: #d73a49;', error);
      console.error('%c üîç Stack Trace', 'font-weight: bold; color: #d73a49;', error instanceof Error ? error.stack : 'No stack trace available');
      console.groupEnd();
      
      this.initialized = false;
      throw new Error("Failed to initialize AI Generator");
    }
  }

  setCanvasMode(enabled: boolean): void {
    this.canvasMode = enabled;
    logInfo(SOURCE, `Canvas mode ${enabled ? 'ENABLED' : 'DISABLED'}`);
  }

  isCanvasModeEnabled(): boolean {
    return this.canvasMode;
  }

  async generateMiniGame(topic: string, settings?: GameSettingsData): Promise<MiniGame | null> {
    // Create a unique ID for this generation request to track it in logs
    const requestId = Date.now().toString(36) + Math.random().toString(36).substring(2, 5);
    
    try {
      // Group all logs for this request
      console.groupCollapsed(
        `%c ${SOURCE} REQUEST ${requestId} %c ${topic.substring(0, 50)}${topic.length > 50 ? '...' : ''}`,
        'background: #0366d6; color: white; padding: 2px 6px; border-radius: 4px; font-weight: bold;',
        'font-weight: bold;'
      );
      
      logInfo(SOURCE, `Starting game generation for topic: "${topic}"`);
      logInfo(SOURCE, `Settings:`, settings);
      logInfo(SOURCE, `Canvas mode: ${this.canvasMode ? 'ON' : 'OFF'}`);
      
      const gameType = getGameTypeByTopic(topic);
      if (gameType) {
        logInfo(SOURCE, `Determined game type: ${gameType.name}`);
      }
      
      const startTime = Date.now();
      
      // Check if the game requires images with an expanded set of keywords
      const requiresImages = this.checkIfGameRequiresImages(topic);
      if (requiresImages) {
        logInfo(SOURCE, `This game likely requires images. Ensuring image support.`);
      }
      
      // Generate with Gemini
      logInfo(SOURCE, `Starting game generation with ${this.modelName}...`);
      
      // S·ª≠a: B·ªè tham s·ªë requiresImages kh√¥ng c·∫ßn thi·∫øt v√† kh√¥ng ƒë√∫ng ki·ªÉu 
      const geminiResult = await tryGeminiGeneration(this.model, topic, settings);
      
      const duration = measureExecutionTime(startTime);
      logSuccess(SOURCE, `Gemini generation completed in ${duration.seconds}s (${duration.ms}ms)`);
      
      if (geminiResult && geminiResult.content) {
        logSuccess(SOURCE, `Successfully generated game`);
        logInfo(SOURCE, `Code size: ${geminiResult.content.length.toLocaleString()} characters`);
        
        // Close the group before returning
        console.groupEnd();
        
        return {
          title: topic,
          description: "",
          content: geminiResult.content
        };
      }
      
      logWarning(SOURCE, "Gemini generation failed, using fallback game");
      const fallbackGame = createFallbackGame(topic);
      
      // Close the group before returning
      console.groupEnd();
      
      return {
        title: topic,
        description: "",
        content: fallbackGame.content
      };
      
    } catch (error) {
      logError(SOURCE, "Error in generateMiniGame", error);
      logWarning(SOURCE, "Creating fallback game due to error");
      
      // Close any open group
      try { console.groupEnd(); } catch (e) {}
      
      const fallbackGame = createFallbackGame(topic);
      return {
        title: topic,
        description: "",
        content: fallbackGame.content
      };
    }
  }

  // Enhanced method to determine if a game likely needs images with expanded keywords
  private checkIfGameRequiresImages(topic: string): boolean {
    const imageRelatedKeywords = [
      // Original keywords
      '·∫£nh', 'h√¨nh', 'h√¨nh ·∫£nh', 'picture', 'image', 'photo', 'pictionary', 
      'memory', 'card', 'tr√≠ nh·ªõ', 'th·∫ª', 'matching', 'gh√©p h√¨nh', 'x·∫øp h√¨nh',
      'puzzle', 'jigsaw', 'geography', 'ƒë·ªãa l√Ω', 'b·∫£n ƒë·ªì', 'map', 'art', 'ngh·ªá thu·∫≠t',
      'drawing', 'v·∫Ω', 'paint', 'visual', 'icon', 'bi·ªÉu t∆∞·ª£ng', 'logo', 'nh·∫≠n di·ªán',
      'recognition', 'identify', 'spotting', 'observation', 'quan s√°t',
      
      // New expanded keywords for more precise detection
      'gallery', 'th∆∞ vi·ªán', 'b·ªô s∆∞u t·∫≠p', 'collection', 'portrait', 'ch√¢n dung',
      'landscape', 'phong c·∫£nh', 'photo album', 'album ·∫£nh', 'photography', 'nhi·∫øp ·∫£nh',
      'illustration', 'minh h·ªça', 'graphics', 'ƒë·ªì h·ªça', 'design', 'thi·∫øt k·∫ø',
      'camera', 'm√°y ·∫£nh', 'snapshot', '·∫£nh ch·ª•p', 'gallery', 'tri·ªÉn l√£m',
      'pixel', 'ƒëi·ªÉm ·∫£nh', 'resolution', 'ƒë·ªô ph√¢n gi·∫£i', 'color', 'm√†u s·∫Øc',
      'filter', 'b·ªô l·ªçc', 'edit', 'ch·ªânh s·ª≠a', 'crop', 'c·∫Øt x√©n',
      'thumbnail', 'h√¨nh thu nh·ªè', 'slideshow', 'tr√¨nh chi·∫øu', 'preview', 'xem tr∆∞·ªõc',
      'view', 'xem', 'display', 'hi·ªÉn th·ªã', 'show', 'tr√¨nh b√†y',
      'screen', 'm√†n h√¨nh', 'desktop', 'm√°y t√≠nh', 'monitor', 'm√†n h√¨nh',
      'scan', 'qu√©t', 'capture', 'ch·ª•p', 'upload', 't·∫£i l√™n',
      'download', 't·∫£i v·ªÅ', 'share', 'chia s·∫ª', 'save', 'l∆∞u',
      'print', 'in', 'zoom', 'ph√≥ng to', 'flip', 'l·∫≠t',
      'rotate', 'xoay', 'adjust', 'ƒëi·ªÅu ch·ªânh', 'enhance', 'tƒÉng c∆∞·ªùng',
      'sight', 'th·ªã gi√°c', 'eyes', 'm·∫Øt', 'look', 'nh√¨n',
      'vision', 't·∫ßm nh√¨n', 'scene', 'c·∫£nh', 'sight', 'c·∫£nh t∆∞·ª£ng',
      'appearance', 'v·∫ª ngo√†i', 'visible', 'c√≥ th·ªÉ nh√¨n th·∫•y', 'invisible', 'kh√¥ng th·ªÉ nh√¨n th·∫•y',
      'visible', 'h·ªØu h√¨nh', 'invisible', 'v√¥ h√¨nh', 'hidden', '·∫©n',
      'show', 'hi·ªán', 'hide', '·∫©n', 'reveal', 'ti·∫øt l·ªô',
      'blur', 'm·ªù', 'sharp', 's·∫Øc n√©t', 'focus', 't·∫≠p trung',
    ];

    const lowerTopic = topic.toLowerCase();
    
    // Enhanced detection logic: check if any of the keywords is in the topic
    const containsImageKeyword = imageRelatedKeywords.some(keyword => lowerTopic.includes(keyword));
    
    // Game type specific detection
    const isImageBasedGameType = lowerTopic.includes('pictionary') || 
                                 lowerTopic.includes('memory card') || 
                                 lowerTopic.includes('flashcard') || 
                                 lowerTopic.includes('puzzle') || 
                                 lowerTopic.includes('matching') ||
                                 lowerTopic.includes('x·∫øp h√¨nh') ||
                                 lowerTopic.includes('gh√©p h√¨nh') ||
                                 lowerTopic.includes('th·∫ª nh·ªõ') ||
                                 lowerTopic.includes('tr√≠ nh·ªõ');
    
    const result = containsImageKeyword || isImageBasedGameType;
    
    // Log keyword matches for debugging
    if (result) {
      const matchedKeywords = imageRelatedKeywords.filter(keyword => lowerTopic.includes(keyword));
      logInfo(SOURCE, `Image detection: ${result ? 'YES' : 'NO'}`, { 
        matchedKeywords: matchedKeywords.length > 0 ? matchedKeywords : 'game type based detection'
      });
    }
    
    return result;
  }
  
  // Static method to get the instance
  static getInstance(apiKey: string = API_KEY, options?: { modelName?: string; canvasMode?: boolean }): AIGameGenerator {
    if (!instance) {
      instance = new AIGameGenerator(apiKey, options);
    }
    return instance;
  }
}

// Re-export types for convenience
export type { MiniGame };
