
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface MiniGame {
  title?: string;
  content: string;
}

interface ToastFunction {
  (options: {
    title: string;
    description: string;
    variant?: 'default' | 'destructive';
  }): void;
}

export const useGameShareManager = (
  miniGame: MiniGame | null,
  toast: ToastFunction,
  onShare?: () => Promise<string>
) => {
  const [isSharing, setIsSharing] = useState(false);

  const handleShare = useCallback(async () => {
    if (!miniGame?.content) {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng c√≥ game ƒë·ªÉ chia s·∫ª",
        variant: "destructive"
      });
      return;
    }

    // If custom onShare is provided, use it
    if (onShare) {
      try {
        setIsSharing(true);
        const shareUrl = await onShare();
        
        // Copy to clipboard
        await navigator.clipboard.writeText(shareUrl);
        
        toast({
          title: "ƒê√£ sao ch√©p",
          description: "Link chia s·∫ª ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
        });
      } catch (error) {
        console.error('Error sharing game:', error);
        toast({
          title: "L·ªói chia s·∫ª",
          description: "Kh√¥ng th·ªÉ chia s·∫ª game. Vui l√≤ng th·ª≠ l·∫°i.",
          variant: "destructive"
        });
      } finally {
        setIsSharing(false);
      }
      return;
    }

    // Default sharing logic
    try {
      setIsSharing(true);

      console.log('üéÆ Sharing game:', {
        title: miniGame.title,
        contentLength: miniGame.content.length
      });

      const { data, error } = await supabase
        .from('games')
        .insert({
          title: miniGame.title || 'Game T√πy Ch·ªânh',
          game_type: 'custom',
          html_content: miniGame.content,
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (error) {
        console.error('üéÆ Error saving game:', error);
        throw error;
      }

      if (!data?.id) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID game');
      }

      const shareUrl = `${window.location.origin}/game/${data.id}`;
      
      console.log('üéÆ Game saved successfully:', {
        gameId: data.id,
        shareUrl
      });

      // Copy to clipboard
      await navigator.clipboard.writeText(shareUrl);

      toast({
        title: "ƒê√£ l∆∞u v√† sao ch√©p",
        description: "Link chia s·∫ª ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
      });

    } catch (error) {
      console.error('üéÆ Error sharing game:', error);
      toast({
        title: "L·ªói chia s·∫ª",
        description: "Kh√¥ng th·ªÉ chia s·∫ª game. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive"
      });
    } finally {
      setIsSharing(false);
    }
  }, [miniGame, toast, onShare]);

  return {
    isSharing,
    handleShare
  };
};
